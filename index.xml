<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hi,I`m lan</title>
    <link>https://liangyuanpeng.github.io/</link>
    <description>Recent content on Hi,I`m lan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 17 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://liangyuanpeng.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>lank8s.cn服务</title>
      <link>https://liangyuanpeng.github.io/service-lank8s.cn/</link>
      <pubDate>Mon, 15 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/service-lank8s.cn/</guid>
      <description>Hi there 👋 国内安装K8S基本镜像站&amp;mdash;&amp;gt; lank8s.cn 欢迎使用，有问题/建议都可以加我微信交流，在博客底部可以找到我的微信联系方式 :) lank</description>
    </item>
    
    <item>
      <title>用kind搭建k8s集群环境</title>
      <link>https://liangyuanpeng.github.io/run-k8s-with-kind/</link>
      <pubDate>Sun, 12 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/run-k8s-with-kind/</guid>
      <description>前言 由于各类基于 kubernetes 的云原生实验或测试的前提都是需要一个 kubernetes 环境,而在写博客时总是需要提及使用 kind 来搭建 kubernetes 环境. 因此这里单独写一篇文章来介绍如何用</description>
    </item>
    
    <item>
      <title>基于giscus打造博客评论系统</title>
      <link>https://liangyuanpeng.github.io/add-comments-with-giscus/</link>
      <pubDate>Mon, 17 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/add-comments-with-giscus/</guid>
      <description>缘由 giscus 与 utterances 评论不同, utterances 直接使用了 github api,因此不需要一个单独的服务,而由于 github discussion 需要使用 graphQL API 访问并且需要 token,因此 giscus 使用 Typescript 实现了一个服务</description>
    </item>
    
    <item>
      <title>markdown-link-check-github-action</title>
      <link>https://liangyuanpeng.github.io/markdown-link-check-github-action/</link>
      <pubDate>Fri, 14 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/markdown-link-check-github-action/</guid>
      <description>缘由</description>
    </item>
    
    <item>
      <title>git-qa</title>
      <link>https://liangyuanpeng.github.io/git-qa/</link>
      <pubDate>Thu, 13 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/git-qa/</guid>
      <description>前言 本文长期更新,欢迎投稿:) 问题QA First, rewinding head to replay your work on top of it...Fast-forwarded text to main. 这个是我在处理 Contour 这个PR时出现的问题,流程是这样的: 我根据 Contour 的主分支 checkout 了一</description>
    </item>
    
    <item>
      <title>为你的博客添加imgbot优化图片</title>
      <link>https://liangyuanpeng.github.io/add-imgbot-for-your-blog-image/</link>
      <pubDate>Tue, 11 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/add-imgbot-for-your-blog-image/</guid>
      <description>前言 博客中使用图片是一件很常见的事情,那么图片优化你是怎么做的呢? 我假设我计划做这件事情那么我可能会这样执行: 寻找可以优化图片的工具,保证优</description>
    </item>
    
    <item>
      <title>不要完全相信GithubAction</title>
      <link>https://liangyuanpeng.github.io/do-not-totally-believe-github-action/</link>
      <pubDate>Thu, 06 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/do-not-totally-believe-github-action/</guid>
      <description>长话短说 突然我的博客项目的 github action 一直处于一个排队的状态,以至于我无法更新博客的 algolia 索引,虽然对我的影响其实微乎其微,但我确实不太喜欢这种感觉,我</description>
    </item>
    
    <item>
      <title>使用容器镜像仓库存储OPA策略</title>
      <link>https://liangyuanpeng.github.io/opci-registry-for-opa-policy/</link>
      <pubDate>Wed, 05 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/opci-registry-for-opa-policy/</guid>
      <description>services: ghcr-registry: url: https://ghcr.io type: oci # credentials: # bearer: # scheme: &amp;#34;Bearer&amp;#34; # token: &amp;#34;你的token&amp;#34; bundles: authz: service: ghcr-registry resource: ghcr.io/liangyuanpeng/policy-hello:1.0.0 persist: true polling: min_delay_seconds: 30 max_delay_seconds: 120 注意,OPA 只会去 OCI 镜像仓库下载这三种格式的内容:</description>
    </item>
    
    <item>
      <title>epbf入门指南</title>
      <link>https://liangyuanpeng.github.io/what-is-ebpfan-introductory-guide/</link>
      <pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/what-is-ebpfan-introductory-guide/</guid>
      <description>该文章是由 Suleiman Abubakar Sadeeq 撰写的。Suleiman Abubakar Sadeeq 是一位有抱负的 React 开发人员，正在学习并帮助构建企业应用程序。在空闲时间，他会踢足球，观看足球比赛并</description>
    </item>
    
    <item>
      <title>将你的yaml文件迁移到helm</title>
      <link>https://liangyuanpeng.github.io/migrate-your-manifest-yaml-files-into-helm-chart/</link>
      <pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/migrate-your-manifest-yaml-files-into-helm-chart/</guid>
      <description>在这篇博客文章中，我们将学习如何将现有的清单 yaml 文件转换为Helm Charts。 清单文件 Kubernetes 清单文件是描述 K8s 对象期望状态的YAML文件，例如 po</description>
    </item>
    
    <item>
      <title>从零到 Kubernetes 子项目负责人</title>
      <link>https://liangyuanpeng.github.io/from-zero-to-kubernets-subproject-lead/</link>
      <pubDate>Thu, 30 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/from-zero-to-kubernets-subproject-lead/</guid>
      <description>作者 Ala Dewberry (VMware) 译者 梁远鹏 与 chatGPT 加入任何开源社区都可能让人望而生畏，尤其是像 Kubernetes 这样的大型社区。我写这篇文章是为了分享我的经验，并鼓励其他人加入其中。</description>
    </item>
    
    <item>
      <title>基于k8up备份PVC到S3存储</title>
      <link>https://liangyuanpeng.github.io/backup-pvc-to-s3-with-k8up/</link>
      <pubDate>Wed, 29 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/backup-pvc-to-s3-with-k8up/</guid>
      <description>前言 k8up 目前是 CNCF sanbox 项目,基于 restic 来做数据备份到 S3 以及将数据从 S3 恢复到 PVC 中. 可以一次性备份也可以定时备份,普通备份是通过一个 job 挂载 PVC 来备份数据,也</description>
    </item>
    
    <item>
      <title>基于webtop容器的可视化桌面,浏览器就能打开桌面!</title>
      <link>https://liangyuanpeng.github.io/dev-desktop-with-webtop/</link>
      <pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/dev-desktop-with-webtop/</guid>
      <description>前言 前段时间研究过基于容器来搭建一个可视化的 Linux 开发环境,主要是为了研究 java 开发的 Apache Pulsar 和 Apache Bookkeeper 两个项目的源码,如果是非 JVM 类的语言可以基于 openvscode 来搞一个</description>
    </item>
    
    <item>
      <title>Kubernetes HPA:定制指标实现有效的CPU和内存扩展</title>
      <link>https://liangyuanpeng.github.io/kubernetes-hpa-custom-metrics-for-effective-cpu-memory-scaling/</link>
      <pubDate>Mon, 27 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/kubernetes-hpa-custom-metrics-for-effective-cpu-memory-scaling/</guid>
      <description>作者 caiolombello 译者 梁远鹏 介绍和概述： Kubernetes 已成为容器编排的事实标准，为管理大规模容器化应用程序提供了强大的平台。 Kubernetes 的一个基本功能是其自动缩放功能，它允许</description>
    </item>
    
    <item>
      <title>JFrog 向 CD 基金会授予开源 Pyrsia</title>
      <link>https://liangyuanpeng.github.io/jfrog-grants-open-source-pyrsia-to-cd-foundation/</link>
      <pubDate>Fri, 24 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/jfrog-grants-open-source-pyrsia-to-cd-foundation/</guid>
      <description>一项社区倡议旨在为 Pyrsia 分散式包网络提供公正和透明的治理模型，聚集了 Docker、DeployHub、Oracle 等公司。 Pyrsia 是一个开源软件社区倡</description>
    </item>
    
    <item>
      <title>keda-helmchart发布v2.10.1</title>
      <link>https://liangyuanpeng.github.io/keda-helmchart-release-with-v2.10.1/</link>
      <pubDate>Tue, 14 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/keda-helmchart-release-with-v2.10.1/</guid>
      <description>keda helm chart 发布v2.10.1 长话短说 helm repo add kedacore https://kedacore.github.io/charts helm repo update helm install keda kedacore/keda --version 2.10.1 -n keda --create-namespace 新内容 提供了对podLabels在 webhook Deployment 中的配置 (#404 🎉 贡献者 @pari-) 为cert-ma</description>
    </item>
    
    <item>
      <title>开源在高度合规组织中的重要性</title>
      <link>https://liangyuanpeng.github.io/importance-of-open-source-in-high-compliance-organizations/</link>
      <pubDate>Wed, 08 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/importance-of-open-source-in-high-compliance-organizations/</guid>
      <description>作者 Matheus Paes Pereira、Garima Bajpai 和 Moïse Kameni 开源技术越来越受欢迎,尤其是在航空、银行、医疗保健、能源和国防等监管严格的行业.由于采用</description>
    </item>
    
    <item>
      <title>flomesh-ingress浅试</title>
      <link>https://liangyuanpeng.github.io/flomesh-ingress-quickstart/</link>
      <pubDate>Fri, 03 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/flomesh-ingress-quickstart/</guid>
      <description>前提 在开始之前,你需要以下前提准备. 对于本文来说使用的 K8S 环境是基于 Kind 来搭建的,因此将 Kind 命令写在前提内,但是如果你使用了其他工具搭建 K8S 或已经有</description>
    </item>
    
    <item>
      <title>ytt与各类yaml相关工具对比</title>
      <link>https://liangyuanpeng.github.io/ytt-vs-x/</link>
      <pubDate>Sat, 25 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/ytt-vs-x/</guid>
      <description>前言 ytt 是 CNCF 项目 carvel 中的一个命令行工具,来看看 ytt 与业内其他 yaml 相关工具的对比情况. ytt vs Go text/template (或其他的一些文本模板工具) Go模板 Jinja 大多数通用模板工具</description>
    </item>
    
    <item>
      <title>国内环境拉取gcr和k8s镜像</title>
      <link>https://liangyuanpeng.github.io/pull-gcr-k8s-image-with-lank8s/</link>
      <pubDate>Wed, 22 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/pull-gcr-k8s-image-with-lank8s/</guid>
      <description>前言 本文接下来所有配置都是基于 lank8s服务来做的. containerd crio distribution registry zot registry harbor docker docker pull registry.lank8s.cn/kube-apiserver:v1.26.0 kubeadm</description>
    </item>
    
    <item>
      <title>常用网关都是如何配置缓存请求的</title>
      <link>https://liangyuanpeng.github.io/how-to-config-for-cache-from-gateway/</link>
      <pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/how-to-config-for-cache-from-gateway/</guid>
      <description>前言 Envoy 由于 envoy cache 遵循 http cache 规范,因此规定缓存的 API 需要返回cache-control的 header,并且 value 需要标识缓存的时间,例如缓存 10min max-age=600. envoy.yaml static_resources: listeners: -</description>
    </item>
    
    <item>
      <title>基于Envoy搭建K8S应用开发环境</title>
      <link>https://liangyuanpeng.github.io/k8s-app-dev-with-envoy/</link>
      <pubDate>Sun, 19 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/k8s-app-dev-with-envoy/</guid>
      <description>主要思想 主要思想是在 K8S 集群中部署一个 Envoy 服务,然后将请求以 L4/L7 的方式代理请求. 例如搭建 webhook 的开发环境时是做 L7 代理,搭建 kube-apiserver 时是做 L4 代理.</description>
    </item>
    
    <item>
      <title>编译kubernetes组件</title>
      <link>https://liangyuanpeng.github.io/compile-kubernetes/</link>
      <pubDate>Sun, 19 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/compile-kubernetes/</guid>
      <description>kubernetes 发展到了今天(2023-02-19),编译 kubernetes 已经是一件很简单的事情,唯一的门槛就是需要有适合的内存资源以及编译需要用到的 registry.k8s.io 中的镜像. 编译 解</description>
    </item>
    
    <item>
      <title>[长期更新]envoy常用</title>
      <link>https://liangyuanpeng.github.io/ennoy-faq/</link>
      <pubDate>Thu, 16 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/ennoy-faq/</guid>
      <description>说明 本文主要收集常见场景下 Envoy 的配置以及遇到的一些常见问题,欢迎对本文进行投稿你认为好的场景配置或问题. 权重分流 基于权重做灰度发布. - match: prefix: / route:</description>
    </item>
    
    <item>
      <title>[长期更新]k8s组件常用参数</title>
      <link>https://liangyuanpeng.github.io/frozen-for-k8s-gcr-io/</link>
      <pubDate>Thu, 16 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/frozen-for-k8s-gcr-io/</guid>
      <description>说明 本文主要收集常见场景下 K8S 组件的配置以及遇到的一些常见问题,欢迎对本文进行投稿你认为好的场景配置或问题.</description>
    </item>
    
    <item>
      <title>k8s.gcr.io注册表完全冻结</title>
      <link>https://liangyuanpeng.github.io/frozen-for-k8s-gcr-io/</link>
      <pubDate>Sat, 11 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/frozen-for-k8s-gcr-io/</guid>
      <description>前言 k8s.gcr.io 这个注册表将会在 2023年4月3日完全冻结,新的注册表地址为 registry.k8s.io,在2022年11月28日官方就已经发布了一</description>
    </item>
    
    <item>
      <title>harbor镜像代理</title>
      <link>https://liangyuanpeng.github.io/registry-mirrors-of-harbor/</link>
      <pubDate>Thu, 09 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/registry-mirrors-of-harbor/</guid>
      <description>前言 关于 lank8s.cn 关于 lank8s.cn 可以通过 lank8s.cn服务 或 Lank8s Github组织 了解更多.</description>
    </item>
    
    <item>
      <title>新的容器镜像仓库选择</title>
      <link>https://liangyuanpeng.github.io/new-container-image-registry-of-zot-from-cncf/</link>
      <pubDate>Wed, 18 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/new-container-image-registry-of-zot-from-cncf/</guid>
      <description>简介 Zot 是思科开源的遵循 OCI 规范的容器镜像仓库,目前捐赠给了 CNCF,是 Sandbox 级别项目. 本文主要讲述作为镜像代理仓库下的应用场景. 部署 Kubernetes 前提 helm kubernetes cluster 这</description>
    </item>
    
    <item>
      <title>为containerd配置仓库镜像</title>
      <link>https://liangyuanpeng.github.io/registry-mirrors-for-containerd/</link>
      <pubDate>Thu, 12 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/registry-mirrors-for-containerd/</guid>
      <description>前言 containerd 的仓库镜像功能是很有用的功能,特别是国内无法访问 gcr.io 和 k8s.gcr.io 以及 registry.k8s.io 这些镜像仓库的情况下. K3S 和 Kind 都提供了比较简单的方式来为内置的 containerd 配置仓库镜像</description>
    </item>
    
    <item>
      <title>K8S内置准入校验CRD参数配合lua起飞</title>
      <link>https://liangyuanpeng.github.io/k8s-validating-admission-policy-with-crdparam-lua/</link>
      <pubDate>Wed, 11 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/k8s-validating-admission-policy-with-crdparam-lua/</guid>
      <description>前言 k8s 1.26 推出了内置的准入校验机制,只需要使用 CEL 表达式就可以完成基本的准入校验逻辑,而高级功能包含将参数动态化,可以使用 CRD 资源的某个字段作为参</description>
    </item>
    
    <item>
      <title>用cel表达式来实现k8s准入校验</title>
      <link>https://liangyuanpeng.github.io/k8s-admissionregistration-with-cel/</link>
      <pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/k8s-admissionregistration-with-cel/</guid>
      <description>前言 在 K8S 1.26 版本以前,达到 K8S 准入校验策略效果的方式有两种： 自己实现 K8S webook 直接使用 CNCF 项目中以 K8S 策略展开的项目,例如OPA、kyverno. 这些都是</description>
    </item>
    
    <item>
      <title>部署去ZK后的Apache Pulsar</title>
      <link>https://liangyuanpeng.github.io/deploy-pulsar/</link>
      <pubDate>Mon, 06 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/deploy-pulsar/</guid>
      <description>前言 本文基本上是按照官方文档来实践的,非常简单. 首先要明确我们需要做的几件事情： 生成 token 并且配置 pulsar broker 开启 Token 认证. 配置 pulsar broker 开启自身需要用到的客户</description>
    </item>
    
    <item>
      <title>部署一个webhook,轻松解决gcr.io</title>
      <link>https://liangyuanpeng.github.io/resolve-gcr.io-with-webhook-of-repalcer/</link>
      <pubDate>Tue, 05 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/resolve-gcr.io-with-webhook-of-repalcer/</guid>
      <description>前言 lank8s.cn 已经正常运营几年了，目前可以看到每天都有人在使用 gcr.lank8s.cn 来拉取 gcr.io 的镜像,避免了墙带来的困扰,不过当需要拉取的不同的镜像多了之后可能会显得有些</description>
    </item>
    
    <item>
      <title>用GO开发Envoy wasm filter</title>
      <link>https://liangyuanpeng.github.io/ennoy-wasm-filter-with-go/</link>
      <pubDate>Sun, 20 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/ennoy-wasm-filter-with-go/</guid>
      <description>目标 总结</description>
    </item>
    
    <item>
      <title>用Rust开发Envoy wasm filter</title>
      <link>https://liangyuanpeng.github.io/ennoy-wasm-filter-with-rust/</link>
      <pubDate>Sun, 20 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/ennoy-wasm-filter-with-rust/</guid>
      <description>目标 用WASM filter实现WWW-Authenticate认证,并且支持配置域名白名单和URL白名单. 了解envoy-wasm-rust</description>
    </item>
    
    <item>
      <title>CNCF批准OpenTracing项目归档</title>
      <link>https://liangyuanpeng.github.io/open-tracing-project-archive/</link>
      <pubDate>Fri, 04 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/open-tracing-project-archive/</guid>
      <description>OpenTracing归档 自从OpenTracing合并到OpenTelemetry项目后,维护者的意愿是将OpenTracing项目归档,</description>
    </item>
    
    <item>
      <title>Rust应用容器化</title>
      <link>https://liangyuanpeng.github.io/container-for-rust-application/</link>
      <pubDate>Wed, 02 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/container-for-rust-application/</guid>
      <description>本文打包的rust应用是基于actix-web开发的包含expose metrics的web应用. Rust应用容器化的几种方式 编写Docker</description>
    </item>
    
    <item>
      <title>快速认识kubernetes的rust客户端</title>
      <link>https://liangyuanpeng.github.io/quick-start-kubernetes-client-rust/</link>
      <pubDate>Wed, 02 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/quick-start-kubernetes-client-rust/</guid>
      <description>介绍 kube-rs目前是CNCF的沙箱项目,有一个官方的controller实现示例controller-rs. 还有一个Rust实现的Ope</description>
    </item>
    
    <item>
      <title>Rust常见问题</title>
      <link>https://liangyuanpeng.github.io/rust-exception-qa/</link>
      <pubDate>Mon, 31 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/rust-exception-qa/</guid>
      <description>声明 由于我不是 Rust 专家,因此只是将使用/研究 Rust 时遇到的问题分享出来,如有不对之处麻烦提示或帮忙纠正一下,感谢! 常见问题 feature edition2021 is required this Cargo does not support nightly features, but</description>
    </item>
    
    <item>
      <title>cncf基金会中的rust项目</title>
      <link>https://liangyuanpeng.github.io/rust-project-in-cncf/</link>
      <pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/rust-project-in-cncf/</guid>
      <description>介绍 本文会介绍在CNCF中的Rust项目,项目的介绍可能是很简陋的,如果你可以帮忙完善一下项目的介绍,那就太好了,随时欢迎在评论区或网站仓库</description>
    </item>
    
    <item>
      <title>将热更新configmap作为Envoy的XDS服务</title>
      <link>https://liangyuanpeng.github.io/envoy-file-xds-with-reload-configmap/</link>
      <pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/envoy-file-xds-with-reload-configmap/</guid>
      <description>前言 由于实验基于kubernetes,因此你首先需要有一个kubernetes环境,这里推荐使用 Kind 命令来搭建.见用kind搭建k8s集群环境</description>
    </item>
    
    <item>
      <title>k8s部署云原生CD引擎Argo</title>
      <link>https://liangyuanpeng.github.io/k8s-cd-argo-deploy/</link>
      <pubDate>Thu, 20 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/k8s-cd-argo-deploy/</guid>
      <description>部署Argo CD 安装Argo CD kubectl create namespace argocd kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml 如果下载访问有问题可以改一下地址,是我个人学习使用的一个代理github文件的下载地址.将r</description>
    </item>
    
    <item>
      <title>kubernetes常见问题</title>
      <link>https://liangyuanpeng.github.io/kubernetes-qa/</link>
      <pubDate>Tue, 18 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/kubernetes-qa/</guid>
      <description>声明 本文会持续的更新,将在使用kubernetes过程中遇到的问题都收集起来.欢迎投稿加入你遇到的问题. 跨版本升级 service-account-issuer is a required flag, &amp;ndash;service-account-signing-key-file and &amp;ndash;service-account-issuer are required flags 版本</description>
    </item>
    
    <item>
      <title>反向代理kube-apiserver的请求</title>
      <link>https://liangyuanpeng.github.io/proxy-kube-apiserver/</link>
      <pubDate>Mon, 17 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/proxy-kube-apiserver/</guid>
      <description>本文会介绍在L7中转发下面两种方式的请求以及L4转发. 默认的使用证书的kubectl请求 使用token的kubectl请求 L4比较简单处理,</description>
    </item>
    
    <item>
      <title>部署一个完整带SSL的etcd</title>
      <link>https://liangyuanpeng.github.io/deploy-full-ssl-etcd/</link>
      <pubDate>Mon, 17 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/deploy-full-ssl-etcd/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Contour-v1.18.3发布</title>
      <link>https://liangyuanpeng.github.io/contour-v1.18.3-release/</link>
      <pubDate>Sun, 09 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/contour-v1.18.3-release/</guid>
      <description>前言 我们很高兴发布发布我们用于kubernetes集群七层反响代理Contour的1.18.3版本. Contour是什么 Contour是基于</description>
    </item>
    
    <item>
      <title>Contour-v1.20.0-beta.1发布</title>
      <link>https://liangyuanpeng.github.io/contour-v1.20.0-beta.1-release/</link>
      <pubDate>Sun, 09 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/contour-v1.20.0-beta.1-release/</guid>
      <description>前言 我们很高兴发布发布我们用于kubernetes集群七层反响代理Contour的v1.20.0版本. Contour是什么 Contour是基</description>
    </item>
    
    <item>
      <title>Contour-v1.20.0-beta.1发布</title>
      <link>https://liangyuanpeng.github.io/contour-v1.20.0-beta.1-release/</link>
      <pubDate>Sun, 09 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/contour-v1.20.0-beta.1-release/</guid>
      <description>前言 我们很高兴推出 Contour 的 v1.24.0 版本,这是我们针对 kubernetes 集群的第7层 HTTP 反向代理. 主要更新 修复了重复 HTTPProxy include condition的处理 重复的 include condition 现在能够被正确识</description>
    </item>
    
    <item>
      <title>快速开始OpenEBS</title>
      <link>https://liangyuanpeng.github.io/quick-start-openebs/</link>
      <pubDate>Sun, 02 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/quick-start-openebs/</guid>
      <description>前言 前提 使用OpenEBS需要机器已经安装了iSCSI 已经安装了kubernetes ubuntu可以用下面的命令安装和开启: sudo apt-get update sudo apt-get install open-iscsi sudo</description>
    </item>
    
    <item>
      <title>简单部署Apache-Bookkeeper</title>
      <link>https://liangyuanpeng.github.io/simple-deploy-for-apache-bookkeeper/</link>
      <pubDate>Sun, 26 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/simple-deploy-for-apache-bookkeeper/</guid>
      <description>前言 开始部署 由于apache bookkeeper(本文后续简称为BK)需要使用元数据服务中心,当前支持zookeeper和etcd,本文将会</description>
    </item>
    
    <item>
      <title>Flink常见问题</title>
      <link>https://liangyuanpeng.github.io/flink-exception-qa/</link>
      <pubDate>Thu, 23 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/flink-exception-qa/</guid>
      <description>声明 由于我不是Flink专家,因此只是将使用/研究Flink时遇到的问题分享出来,如有不对之处麻烦提示或帮忙纠正一下,感谢! 常见异常 This type (GenericType&amp;lt;java.util.Map&amp;gt;) cannot</description>
    </item>
    
    <item>
      <title>LitmusChaos即将进入孵化阶段</title>
      <link>https://liangyuanpeng.github.io/litmus-chaos-incubation-coming/</link>
      <pubDate>Thu, 23 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/litmus-chaos-incubation-coming/</guid>
      <description>即将毕业的LitmusChaos 目前 LitmusChaos 项目正在进入孵化投票阶段,相信很快就会宣布正式成为孵化项目. 投票详情见:https://lists.c</description>
    </item>
    
    <item>
      <title>OpenELB进入CNCF沙箱项目</title>
      <link>https://liangyuanpeng.github.io/openelb-cncf-sanbox/</link>
      <pubDate>Thu, 23 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/openelb-cncf-sanbox/</guid>
      <description>OpenELB是什么 在 Kubernetes 的世界中有三中 service类型,ClusterIP、NodePort 和 LoadBalancer. 而 LoadBalancer 类型一般情况下只有云厂商才会提供这种类</description>
    </item>
    
    <item>
      <title>欢迎参与chirpstack应用同步器的贡献</title>
      <link>https://liangyuanpeng.github.io/welcome-contribute-chirpstack-application-syncer/</link>
      <pubDate>Tue, 21 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/welcome-contribute-chirpstack-application-syncer/</guid>
      <description>chirpstack-application-syncer 在两个chirpstack服务器之间同步你的chirpstack application数据,目前还处于初步实现阶段,预期效果会是下面这样:</description>
    </item>
    
    <item>
      <title>Apache-Bookkeeper开发环境搭建</title>
      <link>https://liangyuanpeng.github.io/apache-bookkeeper-env-for-dev/</link>
      <pubDate>Sun, 19 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/apache-bookkeeper-env-for-dev/</guid>
      <description>打包BK mvn package -DsipTests=true 顺利的话就成功的打包好了. [INFO] Apache BookKeeper :: Tests :: Backward Compatibility :: Test upgrade between yahoo custom version and current SUCCESS [ 0.373 s] [INFO] Apache BookKeeper :: Tests :: Backward Compatibility :: Test Bouncy Castle Provider load non FIPS version SUCCESS [ 0.484 s] [INFO] Apache BookKeeper :: Tests :: Integration ..........</description>
    </item>
    
    <item>
      <title>快速入门OPA</title>
      <link>https://liangyuanpeng.github.io/quick-start-open-policy-agent/</link>
      <pubDate>Sun, 19 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/quick-start-open-policy-agent/</guid>
      <description>什么是OPA 官网介绍 翻译了一段官网的介绍,简单了解下OPA是什么东西. Open Policy Agent是一个开源的通用的策略引擎,它统一了整个技术栈中的策略行</description>
    </item>
    
    <item>
      <title>GO上手项目值得你拥有:Bookkeeper客户端</title>
      <link>https://liangyuanpeng.github.io/bk-client-go-readme/</link>
      <pubDate>Sat, 18 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/bk-client-go-readme/</guid>
      <description>什么是apache bookkeeper 一句话介绍&amp;mdash;&amp;gt;Apache BookKeeper 是企业级存储系统，旨在保证高持久性、一致性与低延迟。 目前广泛应用在Apac</description>
    </item>
    
    <item>
      <title>Rust上手项目值得你拥有:Bookkeeper客户端</title>
      <link>https://liangyuanpeng.github.io/bookkeeper-rs-readme/</link>
      <pubDate>Sat, 18 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/bookkeeper-rs-readme/</guid>
      <description>什么是apache bookkeeper 一句话介绍&amp;mdash;&amp;gt;Apache BookKeeper 是企业级存储系统，旨在保证高持久性、一致性与低延迟。 目前广泛应用在Apac</description>
    </item>
    
    <item>
      <title>helm部署chaosmesh</title>
      <link>https://liangyuanpeng.github.io/deploy-chaosmesh-with-helm/</link>
      <pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/deploy-chaosmesh-with-helm/</guid>
      <description>helm repo add chaos-mesh https://charts.chaos-mesh.org helm install chaos-mesh chaos-mesh/chaos-mesh -n=chaos-testing --version 2.0.4 lan@lan:~$ k get po -n chaos-testing NAME READY STATUS RESTARTS AGE chaos-controller-manager-5f7c8c4569-prc5s 0/1 ContainerCreating 0 40s chaos-daemon-bz859 0/1 ContainerCreating 0 40s chaos-dashboard-5f7b6b9b6b-ml22l 0/1 ContainerCreating 0 40s 最后的最后 本文其实就是按照官方文档操作了一边,就让chaosme</description>
    </item>
    
    <item>
      <title>主动推送metrics到prometheus</title>
      <link>https://liangyuanpeng.github.io/push-metrics-to-prometheus/</link>
      <pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/push-metrics-to-prometheus/</guid>
      <description>前言 一般情况下应用程序配合prometheus收集应用程序的metrics是需要应用程序暴露metrics来让prometheus主动收集信</description>
    </item>
    
    <item>
      <title>k8s-webhook开发技巧</title>
      <link>https://liangyuanpeng.github.io/dev-webhook-for-kubernetes/</link>
      <pubDate>Wed, 24 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/dev-webhook-for-kubernetes/</guid>
      <description>什么是kubernetes webhook 痛点 网上很多文章都是说写了kubernetes webhook代码后编译丢到k8s里面去测试,但是这样就非常消耗时</description>
    </item>
    
    <item>
      <title>部署在线的lank8s webhook之后,不再为k8s.gcr.io/gcr.io镜像苦恼</title>
      <link>https://liangyuanpeng.github.io/deploy-lank8s-webhook-for-k8s.gcr.io/</link>
      <pubDate>Sat, 20 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/deploy-lank8s-webhook-for-k8s.gcr.io/</guid>
      <description>什么是lank8s webhook 前提: 使用这项在线服务需要保证kubernetes所在的机器是联网状态. lank8s webhook是一项在线的webook服务,唯</description>
    </item>
    
    <item>
      <title>部署metrics-server,把kubectl top用起来</title>
      <link>https://liangyuanpeng.github.io/deploy-metrics-server-for-kubectl-top/</link>
      <pubDate>Mon, 15 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/deploy-metrics-server-for-kubectl-top/</guid>
      <description>在部署metrics-server之前使用kubectl top 部署metrics-server yaml部署 yaml文件如下: apiVersion: v1 kind: ServiceAccount metadata: labels: k8s-app: metrics-server name: metrics-server</description>
    </item>
    
    <item>
      <title>Contour-v1.9.0发布</title>
      <link>https://liangyuanpeng.github.io/contour-v1.9.0-release/</link>
      <pubDate>Sun, 31 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/contour-v1.9.0-release/</guid>
      <description>前言 Contour继续添加新功能以帮助你更好的管理集群入口,在我们最新的版本Contour1.9.0中包含了支持外部认证服务(extauth</description>
    </item>
    
    <item>
      <title>Contour-v1.19.1发布</title>
      <link>https://liangyuanpeng.github.io/contour-v1.19.1-release/</link>
      <pubDate>Wed, 27 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/contour-v1.19.1-release/</guid>
      <description>前言 我们很高兴发布发布我们用于kubernetes集群七层反响代理Contour的1.19.1版本. Contour是什么 Contour是基于</description>
    </item>
    
    <item>
      <title>使用kubekey快速部署kubernetes</title>
      <link>https://liangyuanpeng.github.io/deploy-kubernetes-with-kubekey/</link>
      <pubDate>Mon, 25 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/deploy-kubernetes-with-kubekey/</guid>
      <description>前言 Kubekey 是青云研发并开源的一款快速部署 kubernetes 的工具,并且它也是下一代安装kubesphere的工具,使用 kubekey 你可以很轻松的就部署一套 kubernetes/kubespher 环境,我的体验</description>
    </item>
    
    <item>
      <title>新版本longhorn部署需要k8s.gcr.io镜像</title>
      <link>https://liangyuanpeng.github.io/deploy-new-longhorn-lank8s.cn/</link>
      <pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/deploy-new-longhorn-lank8s.cn/</guid>
      <description>前言 在之前，longhorn 的部署是不涉及 k8s.gcr.io 的镜像的,但是在现在新版本当中,csi 相关的镜像都是直接使用 k8s.gcr.io 中的镜像. 淡定 不要慌,这时候可以使</description>
    </item>
    
    <item>
      <title>KubeSphere使用Contour Ingress作为项目网关</title>
      <link>https://liangyuanpeng.github.io/kubesphere-gateway-with-contour/</link>
      <pubDate>Sat, 16 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/kubesphere-gateway-with-contour/</guid>
      <description>前言 目前kubesphere基于Nginx Ingress实现网关，3.2将会重构网关这部分，从而做到使用其他ingress项目作为kubes</description>
    </item>
    
    <item>
      <title>加入contour文档工作组</title>
      <link>https://liangyuanpeng.github.io/join-contour-docs-wg/</link>
      <pubDate>Sun, 10 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/join-contour-docs-wg/</guid>
      <description>Because documentation makes a difference The purpose and scope of the Working Group How to participate We look forward to seeing you! Authors Abigail McCarthy - @a-mccarthy Jonas Rosland - @jonasrosland Orlin Vasilev - @OrlinVasilev 注意 本文还在持续翻译中 原文链接 https://projectcontour.io/docs-wg/</description>
    </item>
    
    <item>
      <title>宣布Contour v1.13.0</title>
      <link>https://liangyuanpeng.github.io/announcing-contour-v1.13.0/</link>
      <pubDate>Sat, 09 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/announcing-contour-v1.13.0/</guid>
      <description>译者:梁远鹏 前言 本译文发布时Contour已经发布v1.19.1 Contour继续添加新功能以帮助您更好地管理集群中的入口操作,我们的Con</description>
    </item>
    
    <item>
      <title>[了解Rust基金会]介绍Mark Rousskov</title>
      <link>https://liangyuanpeng.github.io/introducing-mark-rousskov/</link>
      <pubDate>Fri, 24 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/introducing-mark-rousskov/</guid>
      <description>注意 本文还在持续翻译中. 在接下来的五个星期中，我们将会运行一个名叫&amp;quot;了解董事会&amp;quot;系列，发布来自Rust基金会董事会每个成</description>
    </item>
    
    <item>
      <title>[了解Rust基金会]介绍Tyler Mandry</title>
      <link>https://liangyuanpeng.github.io/introducing-tyler-mandry/</link>
      <pubDate>Thu, 23 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/introducing-tyler-mandry/</guid>
      <description>注意 本文还在持续翻译中. 在接下来的五个星期中，我们将会运行一个名叫&amp;quot;了解董事会&amp;quot;系列，发布来自Rust基金会董事会每个成</description>
    </item>
    
    <item>
      <title>[了解Rust基金会]介绍Bobby Holley</title>
      <link>https://liangyuanpeng.github.io/introducing-bobby-holley/</link>
      <pubDate>Wed, 22 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/introducing-bobby-holley/</guid>
      <description>注意 本文还在持续翻译中. 在接下来的五个星期中，我们将会运行一个名叫&amp;quot;了解董事会&amp;quot;系列，发布来自Rust基金会董事会每个成</description>
    </item>
    
    <item>
      <title>CDF(持续交付基金会)欢迎基于k8s构建容器镜像的框架Shipwright作为新的孵化项目</title>
      <link>https://liangyuanpeng.github.io/cdf-new-project-shipwright/</link>
      <pubDate>Wed, 04 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/cdf-new-project-shipwright/</guid>
      <description>说明: 本文将使用CDF作为持续交付基金会简称. 基于 Tekton 构建容器镜像的简单方法 旧金山,2021年8月3日&amp;mdash;CDF是一个开源软件基金会</description>
    </item>
    
    <item>
      <title>contour版本发布说明</title>
      <link>https://liangyuanpeng.github.io/contour-replease-log/</link>
      <pubDate>Wed, 28 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/contour-replease-log/</guid>
      <description>本系列文章专注于contour版本发布中文说明 Contour Github地址: https://github.com/projectcontour/contour Contour-v1.19.1发布</description>
    </item>
    
    <item>
      <title>Prometheus2.28.1更新讲解</title>
      <link>https://liangyuanpeng.github.io/prometheus-v2.28.1-update/</link>
      <pubDate>Tue, 27 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/prometheus-v2.28.1-update/</guid>
      <description>前言 Prometheus作为第二个从CNCF毕业的顶级项目,其成熟程度是毋庸置疑的,甚至推出了另一个CNCF项目OpenMetrics,希望</description>
    </item>
    
    <item>
      <title>部署去ZK后的Apache Pulsar</title>
      <link>https://liangyuanpeng.github.io/deploy-pulsar/</link>
      <pubDate>Sat, 22 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/deploy-pulsar/</guid>
      <description>前言 当我们在说元数据中心的时候我们在说什么 Bookkeeper 和 Pulsar Broker 都有各自的元数据中心,并且都有自己的元数据中心接口,默认都是ZK. 要实现Pulsar去Zo</description>
    </item>
    
    <item>
      <title>[了解Rust基金会]介绍Shane Miller</title>
      <link>https://liangyuanpeng.github.io/introducing-shane-miller/</link>
      <pubDate>Sun, 18 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/introducing-shane-miller/</guid>
      <description>在接下来的五个星期中，我们将会运行一个名叫&amp;quot;了解董事会&amp;quot;系列，发布来自Rust基金会董事会每个成员的博客帖子，将他们介绍</description>
    </item>
    
    <item>
      <title>Kubernetes多租户–最佳实践指南</title>
      <link>https://liangyuanpeng.github.io/k8s-multi-tenancy-guide/</link>
      <pubDate>Wed, 14 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/k8s-multi-tenancy-guide/</guid>
      <description>前言 随着Kubernetes的使用范围不断扩大，Kubernetes多租户成为越来越多的组织感兴趣的话题。但是，由于Kubernetes本身</description>
    </item>
    
    <item>
      <title>让java程序主动监测死锁</title>
      <link>https://liangyuanpeng.github.io/java_daed_lock_healthcheck/</link>
      <pubDate>Wed, 14 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/java_daed_lock_healthcheck/</guid>
      <description>前言 SpringBoot2.x 引入了 Micrometer,重点支持了 tag,而 tag 是 prometheus 和 influxdb 这类新兴监控存储相关中间件天然特性. 而本文主要讲述检测程序中是否有死锁发生,</description>
    </item>
    
    <item>
      <title>微信小程序接口自动化的实现方案</title>
      <link>https://liangyuanpeng.github.io/automation-test-wechat-api/</link>
      <pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/automation-test-wechat-api/</guid>
      <description>背景 前几天在社区看到有人问微信小程序怎么进行接口自动化https://testerhome.com/topics/28217，所以想把自己如</description>
    </item>
    
    <item>
      <title>离线运行swagger文档</title>
      <link>https://liangyuanpeng.github.io/swagger-api-offline/</link>
      <pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/swagger-api-offline/</guid>
      <description>前言 在社区群看到有人希望能够将kubesphere的文档自己搭一个环境跑起来使用,我想了下这个需求应该是实际使用确实会碰到的,比如某些公司内</description>
    </item>
    
    <item>
      <title>kubernetes部署longhorn</title>
      <link>https://liangyuanpeng.github.io/k8s-deploy-longhorn/</link>
      <pubDate>Fri, 09 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/k8s-deploy-longhorn/</guid>
      <description>前言 longhorn是rancher公司开源并贡献给CNCF的一个开源分布式存储项目,可用来作为kubernetes的CSI存储. 本文介绍h</description>
    </item>
    
    <item>
      <title>Prometheus版本发布说明</title>
      <link>https://liangyuanpeng.github.io/prometheus-replease-log/</link>
      <pubDate>Wed, 07 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/prometheus-replease-log/</guid>
      <description>本系列文章专注于prometheus版本发布中文说明 Prometheus Github地址: https://github.com/prometheus/prometheus prometheus2.25新特性讲解 prometheus2.26</description>
    </item>
    
    <item>
      <title>清理SpringBoot应用无用的metrics指标</title>
      <link>https://liangyuanpeng.github.io/springboot-clear-unuse-metrics/</link>
      <pubDate>Wed, 07 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/springboot-clear-unuse-metrics/</guid>
      <description>前言 上周有个网友问 springboot 程序的 metrics 越来越多了,有40W的指标,现在想清除一些没用的 metrics,要怎样做呢?! 当时我看到这个问题觉得挺有意思,因</description>
    </item>
    
    <item>
      <title>kubernetes部署kube-prometheus</title>
      <link>https://liangyuanpeng.github.io/kubernetes-deploy-kube-prometheus/</link>
      <pubDate>Tue, 06 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/kubernetes-deploy-kube-prometheus/</guid>
      <description>如何部署kube-prometheus 本文使用https://github.com/prometheus-operator/kube-pro</description>
    </item>
    
    <item>
      <title>Prometheus2.26rc.0新特性讲解</title>
      <link>https://liangyuanpeng.github.io/prometheus-release-v2.26rc.0/</link>
      <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/prometheus-release-v2.26rc.0/</guid>
      <description>前言 Prometheus作为第二个从CNCF毕业的顶级项目,其成熟程度是毋庸置疑的,甚至推出了另一个CNCF项目OpenMetrics,希望</description>
    </item>
    
    <item>
      <title>centos安装php8.0</title>
      <link>https://liangyuanpeng.github.io/centos-install-php/</link>
      <pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/centos-install-php/</guid>
      <description>动机 之前一直没有接触PHP的经验,需要安装PHP是由于要搭建Flarum论坛,找了一圈,类似这种论坛的实现都是PHP做的,虽然PHP是世界上</description>
    </item>
    
    <item>
      <title>prometheus对接CoreDNS实现服务发现</title>
      <link>https://liangyuanpeng.github.io/prometheus-coredns-sd/</link>
      <pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/prometheus-coredns-sd/</guid>
      <description>启动etcd [root@localhost etcd-v3.2.32-linux-amd64]# ./etcd --listen-peer-urls=&amp;#34;http://0.0.0.0:2380&amp;#34; --listen-client-urls=&amp;#34;http://0.0.0.0:2379&amp;#34; --advertise-client-urls=&amp;#34;http://0.0.0.0:2379&amp;#34; 2021-04-07 16:03:31.438164 W | pkg/flags: unrecognized environment variable ETCD_VER=v3.2.32 2021-04-07 16:03:31.438308 I | etcdmain: etcd Version: 3.2.32 2021-04-07 16:03:31.438321 I | etcdmain: Git SHA: 7dc07f2a9 2021-04-07 16:03:31.438331 I | etcdmain: Go Version: go1.12.17 coredns配置文件 liangyuanpeng.com { etcd { path /skydns endpoint http://192.168.3.181:2379 } prometheus cache loadbalance } .</description>
    </item>
    
    <item>
      <title>使用Cloudflare pages部署静态博客</title>
      <link>https://liangyuanpeng.github.io/cloudflare-deploy-hugo-site/</link>
      <pubDate>Mon, 22 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/cloudflare-deploy-hugo-site/</guid>
      <description>什么是Cloudflare Cloudflare是一家美国公司 为什么转到Cloudflare pages 记得我第一次听说 Cloudflare 时是在技术群看到其他人聊 CDN 时看</description>
    </item>
    
    <item>
      <title>prometheus研习社筹划</title>
      <link>https://liangyuanpeng.github.io/prometheusyxs-pre-prod/</link>
      <pubDate>Thu, 18 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/prometheusyxs-pre-prod/</guid>
      <description>当前计划已经废弃 前言 Hi,我正在筹划一个Prometheus研习社的社区,希望整合Prometheus中文技术内容,帮助Prometheus</description>
    </item>
    
    <item>
      <title>Prometheus2.25新特性讲解</title>
      <link>https://liangyuanpeng.github.io/prometheus-v2.25-feature/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/prometheus-v2.25-feature/</guid>
      <description>前言 Prometheus作为第二个从CNCF毕业的顶级项目,其成熟程度是毋庸置疑的,甚至推出了另一个CNCF项目OpenMetrics,希望</description>
    </item>
    
    <item>
      <title>ASF第一位华人董事</title>
      <link>https://liangyuanpeng.github.io/first-asf-board-member/</link>
      <pubDate>Fri, 12 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/first-asf-board-member/</guid>
      <description>前言 今天一早打开朋友圈就看到几条消息,都是在讲吴晟当选新一届Apache董事会成员,在一定程度上讲中国已经进入Apache核心并且还会一直展</description>
    </item>
    
    <item>
      <title>springboot添加prometheus支持</title>
      <link>https://liangyuanpeng.github.io/springboot-support-prometheus/</link>
      <pubDate>Fri, 12 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/springboot-support-prometheus/</guid>
      <description>前言 云原生时代Golang语言开始火热起来,Docker、Kubernetes、Istio、Knative、Prometheus、Influ</description>
    </item>
    
    <item>
      <title>自动构建algolia索引</title>
      <link>https://liangyuanpeng.github.io/auto-build-algolia-index/</link>
      <pubDate>Fri, 12 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/auto-build-algolia-index/</guid>
      <description>前言 相信来到这里的朋友都已经知道 algolia 是什么了, algolia 在静态博客领域作为搜索解决方案已经非常主流了,而每次写完博客/文章后都需要自己手动生成索引并上</description>
    </item>
    
    <item>
      <title>Hugo博客SEO优化-URL和标题区分开</title>
      <link>https://liangyuanpeng.github.io/hugo-slug-url/</link>
      <pubDate>Thu, 11 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/hugo-slug-url/</guid>
      <description>前言 Hugo博客默认情况下你的md文件是什么名字那么在网站上点击对应博客时URL就显示什么,但是我们将URL复制发给别人时中文就会显示一串看</description>
    </item>
    
    <item>
      <title>prometheus-alertmanager监控告警系统对接钉钉</title>
      <link>https://liangyuanpeng.github.io/prometheus-alertmanager-monitoring-dingtalk/</link>
      <pubDate>Thu, 11 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/prometheus-alertmanager-monitoring-dingtalk/</guid>
      <description>前言 本文将会讲解alertmanager对接钉钉,并且会演示通过修改metrics值来触发alertmanager进行告警并且展示告警以及告</description>
    </item>
    
    <item>
      <title>prometheus-alertmanager监控告警系统快速开始</title>
      <link>https://liangyuanpeng.github.io/prometheus-alertmanager-monitoring-quickstart/</link>
      <pubDate>Thu, 11 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/prometheus-alertmanager-monitoring-quickstart/</guid>
      <description>本文还在创作当中，将在这几天正式发布。 本文将会讲解通过docker-compose部署prometheus、alertmanager、lan</description>
    </item>
    
    <item>
      <title>ChirpStack自定义JS codec函数</title>
      <link>https://liangyuanpeng.github.io/chirpstack-custom-js-encodec/</link>
      <pubDate>Sat, 06 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/chirpstack-custom-js-encodec/</guid>
      <description>前言 ChirpStack作为Lorawan Server，可以同时接收不同客户的设备数据(通过Application或Org区分开),而如果这</description>
    </item>
    
    <item>
      <title>部署Halo博客</title>
      <link>https://liangyuanpeng.github.io/deploy-halo/</link>
      <pubDate>Fri, 26 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/deploy-halo/</guid>
      <description>前言 jar包部署 注意:jar包部署需要jdk11版本 Docker方式部署 docker方式部署很简单，一条命令即可。 docker run -it -d --name halo -p 8090:8090 -v ~/.halo:/root/.halo halohub/halo 其中</description>
    </item>
    
    <item>
      <title>给hugo博客添加评论功能</title>
      <link>https://liangyuanpeng.github.io/hugo-comment/</link>
      <pubDate>Wed, 17 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/hugo-comment/</guid>
      <description>缘由 静态博客不像动态博客一样想要什么功能就写个代码实现，但是折腾一番还是可以满足日常需求的。本文主要讲述使用utterances给静态博客实</description>
    </item>
    
    <item>
      <title>给hugo博客添加字数统计和阅读需要xx分钟的功能</title>
      <link>https://liangyuanpeng.github.io/addons-word-count-hugo/</link>
      <pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/addons-word-count-hugo/</guid>
      <description>缘由 在看别人博客时经常在文章标题下面见到有共xx字,阅读约xx分钟的字眼，这个功能在hugo中本身就已经自带了，开启这个功能即可。 修改博客页</description>
    </item>
    
    <item>
      <title>Ant Design被删源码库!!404√</title>
      <link>https://liangyuanpeng.github.io/ant-design-deleted-404/</link>
      <pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/ant-design-deleted-404/</guid>
      <description>了解 Ant Design Ant-Design是蚂蚁金服基于React开源的一款企业级UI 设计语言和 React 组件库，深受人们喜爱。 最早消息 还在当前过年的时间点，A</description>
    </item>
    
    <item>
      <title>VirtualbBox导入旧版本虚拟机系统</title>
      <link>https://liangyuanpeng.github.io/virtualbox-imported-old-vm-system/</link>
      <pubDate>Mon, 08 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/virtualbox-imported-old-vm-system/</guid>
      <description>动机 由于VirtualBox自动更新了导致打开了VirtualBox后之前的虚拟机都没显示出来了，需要重新找回之前的虚拟机。 更新后的Virt</description>
    </item>
    
    <item>
      <title>kubeadm配合短域名lank8s.cn部署kubernetes</title>
      <link>https://liangyuanpeng.github.io/kubeadm-deploy-kubernetes-lank8scn/</link>
      <pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/kubeadm-deploy-kubernetes-lank8scn/</guid>
      <description>本文实现目标 本文主要使用kubeadm快速部署一个单机的kubernetes,其中镜像仓库使用lank8s.cn,当然也可以使用其他地址,l</description>
    </item>
    
    <item>
      <title>OpenKruise专栏介绍</title>
      <link>https://liangyuanpeng.github.io/openkruise-column/</link>
      <pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/openkruise-column/</guid>
      <description>OpenKruise 是什么 OpenKruise 是 Kubernetes 的一个标准扩展，它可以配合原生 Kubernetes 使用，并为管理应用容器、sidecar、镜像分发等方面提供更加强大和高效的能力. 最初由阿里巴巴</description>
    </item>
    
    <item>
      <title>LoraWan的第一个网关与设备</title>
      <link>https://liangyuanpeng.github.io/first-lorawan-gateway-device/</link>
      <pubDate>Fri, 05 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/first-lorawan-gateway-device/</guid>
      <description>LoraWan数据走向 可以先看一下下面的数据图 从节点到网关是通过无线传输，也就是lora协议。LoraWan网关接收到数据后将其转化为网络数</description>
    </item>
    
    <item>
      <title>用helm chart将chripstack部署到kubernetes之上</title>
      <link>https://liangyuanpeng.github.io/use-helm-deploy-chirpstack-kubernetes/</link>
      <pubDate>Sat, 30 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/use-helm-deploy-chirpstack-kubernetes/</guid>
      <description>chirpstack-helm-chart 开源lorawan server 项目chirpstack的helm chart english 如何贡献 如果你想对这个项目进行贡献可以点击fork按钮fork这个项目并且发起P</description>
    </item>
    
    <item>
      <title>k8s-client-go源码剖析(二)</title>
      <link>https://liangyuanpeng.github.io/k8s-client-go-source-2/</link>
      <pubDate>Sat, 23 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/k8s-client-go-source-2/</guid>
      <description>简介：云原生社区活动&amp;mdash;Kubernetes 源码剖析第一期第二周 本周是 K8S 源码研习社第一期第二周，学习内容是学习Informer机制</description>
    </item>
    
    <item>
      <title>用docker-compose快速部署ChirpStack</title>
      <link>https://liangyuanpeng.github.io/docker-compose-deploy-chirpstack/</link>
      <pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/docker-compose-deploy-chirpstack/</guid>
      <description>前提 本文使用docker-compose来部署ChirpStack，请确保已经含有以下环境： Git(非必须，可以先下载源码) Docker Docker-compose 关于Lora</description>
    </item>
    
    <item>
      <title>微服务监控:SpringBoot-Micrometer-Influx</title>
      <link>https://liangyuanpeng.github.io/springboot-micrometer-influx/</link>
      <pubDate>Sun, 08 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/springboot-micrometer-influx/</guid>
      <description>前言 聊到微服务监控,首先需要考虑的一个技术选型问题就是使用推数据还是使用拉数据的方式进行数据的收集,这个问题这里不进行具体讲解.本文使用mi</description>
    </item>
    
    <item>
      <title>blog-list记录</title>
      <link>https://liangyuanpeng.github.io/blog-list-todo/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/blog-list-todo/</guid>
      <description>记录Blog发布计划以及执行进度 微服务监控:Micrometer InfluxDb 添加-&amp;gt;2020-03-07 22:23:08 [ ] 微服务监控:Micrometer prometheus</description>
    </item>
    
    <item>
      <title>不用安装docker也能构建docker镜像</title>
      <link>https://liangyuanpeng.github.io/jib-springboot-docker-maven/</link>
      <pubDate>Tue, 18 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/jib-springboot-docker-maven/</guid>
      <description>前提 docker 容器镜像仓库 这里举例可以公用的两个 dockerhub 阿里云容器镜像服务 前言 本文主要介绍的是google开源的一个java领域的docker构建工具ji</description>
    </item>
    
    <item>
      <title>Elasticsearch&#43;Fluentd&#43;Kafka搭建分布式日志系统</title>
      <link>https://liangyuanpeng.github.io/elasticsearch-fluentd-kafka/</link>
      <pubDate>Mon, 17 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/elasticsearch-fluentd-kafka/</guid>
      <description>前言 由于logstash内存占用较大,灵活性相对没那么好,ELK正在被EFK逐步替代.其中本文所讲的EFK是Elasticsearch+Fl</description>
    </item>
    
    <item>
      <title>使用logstash作为docker日志驱动收集日志</title>
      <link>https://liangyuanpeng.github.io/logstash-logdriver-docker/</link>
      <pubDate>Sun, 16 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/logstash-logdriver-docker/</guid>
      <description>前言 logstash是一个开源的日志统一处理数据收集器,属于ELK中的L,在日志收集领域应用广泛. docker默认的日志驱动是json-fi</description>
    </item>
    
    <item>
      <title>使用fluentd作为docker日志驱动收集日志</title>
      <link>https://liangyuanpeng.github.io/fluentd-logdrive-docker/</link>
      <pubDate>Sat, 15 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/fluentd-logdrive-docker/</guid>
      <description>前言 docker默认的日志驱动是json-file,每一个容器都会在本地生成一个/var/lib/docker/containers/con</description>
    </item>
    
    <item>
      <title>制作带有kafka插件和es插件的fluentd镜像</title>
      <link>https://liangyuanpeng.github.io/fluentd-plugin-kafka/</link>
      <pubDate>Sat, 15 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/fluentd-plugin-kafka/</guid>
      <description>前言 Fluentd是用于统一日志记录层的开源数据收集器,是继Kubernetes、Prometheus、Envoy 、CoreDNS 和cont</description>
    </item>
    
    <item>
      <title>fluentd语法入门</title>
      <link>https://liangyuanpeng.github.io/fluentd-quickstart/</link>
      <pubDate>Fri, 14 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/fluentd-quickstart/</guid>
      <description>前言 Fluentd是用于统一日志记录层的开源数据收集器,是继Kubernetes、Prometheus、Envoy 、CoreDNS 和cont</description>
    </item>
    
    <item>
      <title>利用docker和docker-compose部署单机kafka</title>
      <link>https://liangyuanpeng.github.io/docker-compose-deploy-kafka/</link>
      <pubDate>Fri, 14 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/docker-compose-deploy-kafka/</guid>
      <description>前提 docker docker-compose 其中docker-compose不是必须的,单单使用docker也是可以的,这里主要介绍docker和docker-compose两</description>
    </item>
    
    <item>
      <title>docker常用命令集合</title>
      <link>https://liangyuanpeng.github.io/deploy-command/</link>
      <pubDate>Sun, 09 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/deploy-command/</guid>
      <description>停止一台机器上的所有容器 docker stop `docker ps -qa` 根据特定关键字删除镜像 docker rmi `docker images | grep NAME` 本文有新内容时将持续更新</description>
    </item>
    
    <item>
      <title>部署docker swarm集群监控</title>
      <link>https://liangyuanpeng.github.io/deploy-docker-swarm-monitoring/</link>
      <pubDate>Sun, 09 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/deploy-docker-swarm-monitoring/</guid>
      <description>前提 Docker 前言 现在Docker Swarm已经彻底输给了K8S,但是现在K8S依然很复杂，上手难度较Docker Swarm高，如果是小规模团队且需</description>
    </item>
    
    <item>
      <title>docker部署minio</title>
      <link>https://liangyuanpeng.github.io/deploy-minio/</link>
      <pubDate>Thu, 16 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/deploy-minio/</guid>
      <description>前提 docker docker部署 docker部署minio非常简单，只需要两条命令即可完成minio服务器的部署。 docker pull minio/minio docker run -p 9000:9000 minio/minio server /data 下面是两条命令的</description>
    </item>
    
    <item>
      <title>云原生编程语言ballerina:hello-world</title>
      <link>https://liangyuanpeng.github.io/ballerina-hello-world/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/ballerina-hello-world/</guid>
      <description>前言 Ballerina是一款完全开源的编译时强类型语言,愿景是让云原生时代的程序员轻松编写出想要的的软件. 开源地址:https://gith</description>
    </item>
    
    <item>
      <title>Jenkins远程部署Linux服务器</title>
      <link>https://liangyuanpeng.github.io/remote-deploy-of-jenkins-for-linux-application/</link>
      <pubDate>Sun, 13 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/remote-deploy-of-jenkins-for-linux-application/</guid>
      <description>前言 之前在 Jenkins 上也有一些使用经验了，但是都是使用团队配置好的 Jenkins，自己只需要管自己的项目以及执行构建即可，这一次自己尝试了一下配置 Jenkins</description>
    </item>
    
    <item>
      <title>Jenkins远程部署Linux服务器</title>
      <link>https://liangyuanpeng.github.io/remote-deploy-of-jenkins-for-linux-application/</link>
      <pubDate>Sun, 13 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/remote-deploy-of-jenkins-for-linux-application/</guid>
      <description>前言 之前在 Jenkins 上也有一些使用经验了，但是都是使用团队配置好的 Jenkins，自己只需要管自己的项目以及执行构建即可，这一次自己尝试了一下配置 Jenkins</description>
    </item>
    
    <item>
      <title>部署React应用</title>
      <link>https://liangyuanpeng.github.io/deploy-react-app/</link>
      <pubDate>Sun, 06 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/deploy-react-app/</guid>
      <description>前言 前后端分离已经是大趋势，服务器端只需要关注自己的接口逻辑实现，而不需要关注前端的页面跳转，这一部分交由前端处理。常见的就是React应用</description>
    </item>
    
    <item>
      <title>部署React应用</title>
      <link>https://liangyuanpeng.github.io/deploy-react-app/</link>
      <pubDate>Sun, 06 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/deploy-react-app/</guid>
      <description>前言 前后端分离已经是大趋势，服务器端只需要关注自己的接口逻辑实现，而不需要关注前端的页面跳转，这一部分交由前端处理。常见的就是React应用</description>
    </item>
    
    <item>
      <title>转|SOFARPC优雅关闭剖析</title>
      <link>https://liangyuanpeng.github.io/sofarpc-right-down/</link>
      <pubDate>Wed, 12 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/sofarpc-right-down/</guid>
      <description>前言 众所周知，在微服务架构下面，当应用需要进行新功能升级发布，或者异常关闭重启的时候，我们会对应用的进程进行关闭，而在关闭之前，我们希望做一</description>
    </item>
    
    <item>
      <title>转|SOFARPC泛化调用实现剖析</title>
      <link>https://liangyuanpeng.github.io/sofarpc-generic-invoke/</link>
      <pubDate>Wed, 12 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/sofarpc-generic-invoke/</guid>
      <description>SOFA Scalable Open Financial Architecture是蚂蚁金服自主研发的金融级分布式中间件，包含了构建金融级云原生架构所需的各个组件，是在金融场景里锤炼出来的最</description>
    </item>
    
    <item>
      <title>转|SOFARPC序列化比较</title>
      <link>https://liangyuanpeng.github.io/sofarpc-serializer/</link>
      <pubDate>Tue, 11 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/sofarpc-serializer/</guid>
      <description>前言 在应用服务化架构中，RPC 框架是非常重要的基础组件。而在 RPC 框架当中，序列化（以及反序列化）又是必不可少的一环。 因为序列化的性能对整体框架</description>
    </item>
    
    <item>
      <title>转|SOFARPC注解支持剖析</title>
      <link>https://liangyuanpeng.github.io/sofarpc-annotation/</link>
      <pubDate>Tue, 11 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/sofarpc-annotation/</guid>
      <description>1、前言 在SOFABoot 环境下，SOFARPC 提供三种方式给开发人员发布和引用 RPC 服务： XML 方式（配置） Annotation 方式（注解） 编程 API 方式（动态 编程 API 方</description>
    </item>
    
    <item>
      <title>转|SOFARPC跨语言支持剖析</title>
      <link>https://liangyuanpeng.github.io/sofarpc-mult-language/</link>
      <pubDate>Tue, 11 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/sofarpc-mult-language/</guid>
      <description>前言 随着 TIOBE 10月份的编程语言排行 的发布，C++重回第三的位置，新兴的 Swift 和 Go 表现出强劲的上升趋势。 与此同时，虽然目前 Java 的领头位置尚未出现有力挑</description>
    </item>
    
    <item>
      <title>转|SOFARPC路由实现剖析</title>
      <link>https://liangyuanpeng.github.io/sofarpc-route-impl/</link>
      <pubDate>Tue, 11 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/sofarpc-route-impl/</guid>
      <description>前言 RPC 框架需要创造一种调用远程服务如同调用本地般的体验，因此在实现一个基于 RPC 框架的微服务架构的系统时，服务消费者（客户端）往往只需要知道服务</description>
    </item>
    
    <item>
      <title>转|SOFARPC连接管理与心跳剖析</title>
      <link>https://liangyuanpeng.github.io/sofarpc-heartbeat-connect/</link>
      <pubDate>Mon, 10 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/sofarpc-heartbeat-connect/</guid>
      <description>前言 在 RPC 调用过程中，我们经常会和多个服务端进行远程调用，如果在每次调用的时候，都进行 TCP连接，会对 RPC的性能有比较大的影响，因此，实际的</description>
    </item>
    
    <item>
      <title>去哪儿网消息队列设计与实现</title>
      <link>https://liangyuanpeng.github.io/qmq-design/</link>
      <pubDate>Sun, 09 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/qmq-design/</guid>
      <description>前言 去哪儿网近日在GitHub上开源了其内部广泛使用的消息队列 (内部代号 QMQ)，本文从去哪儿网使用消息队列所碰到的各种问题出发探讨去哪儿网</description>
    </item>
    
    <item>
      <title>转|SOFARPC同步异步实现剖析</title>
      <link>https://liangyuanpeng.github.io/sofarpc-sync-async/</link>
      <pubDate>Sun, 09 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/sofarpc-sync-async/</guid>
      <description>前言 这一篇，我们为大家带来了开发过程中，最常接触到的同步异步调用解析。本文会介绍下同步异步的使用场景，以及 SOFARPC 中的代码实现机制，为了方便大家理</description>
    </item>
    
    <item>
      <title>转|SOFARPC线程模型剖析</title>
      <link>https://liangyuanpeng.github.io/sofarpc-modle/</link>
      <pubDate>Sun, 09 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/sofarpc-modle/</guid>
      <description>前言 上一篇，我们介绍了 SOFARPC 同步异步的实现，本文我们将会介绍 SOFARPC 中的线程模型。 本文会从同步异步，阻塞非阻塞开始讲起，进而探讨常见的线程模型设计，之</description>
    </item>
    
    <item>
      <title>AWESOME消息队列</title>
      <link>https://liangyuanpeng.github.io/awesome-messagequeue/</link>
      <pubDate>Sat, 08 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/awesome-messagequeue/</guid>
      <description>前言 消息队列是应用程序解耦通信的一个关键组件,本篇博文主要以列举开源消息队列为目的编写,并不展开具体内容讲解，没有开源的不在列举范围内。 mq</description>
    </item>
    
    <item>
      <title>AWESOME消息队列</title>
      <link>https://liangyuanpeng.github.io/awesome-messagequeue/</link>
      <pubDate>Sat, 08 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/awesome-messagequeue/</guid>
      <description>前言 消息队列是应用程序解耦通信的一个关键组件,本篇博文主要以列举开源消息队列为目的编写,并不展开具体内容讲解，没有开源的不在列举范围内。 mq</description>
    </item>
    
    <item>
      <title>转|SOFARPC链路追踪剖析</title>
      <link>https://liangyuanpeng.github.io/sofarpc-trace/</link>
      <pubDate>Sat, 08 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/sofarpc-trace/</guid>
      <description>一. 前言 微服务已经被广泛应用在工业界，微服务带来易于团队并行开发、独立部署、模块化管理等诸多优点。然而微服务将原单体拆分多个模块独立部署，各</description>
    </item>
    
    <item>
      <title>转|SOFARPC框架之总体设计与扩展机制</title>
      <link>https://liangyuanpeng.github.io/sofarpc-design/</link>
      <pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/sofarpc-design/</guid>
      <description>前言 RPC 框架作为分布式技术的基石，在分布式和微服务环境下，扮演着非常重要的角色。 在蚂蚁金服的分布式技术体系下，我们大量的技术产品（非网关类产品</description>
    </item>
    
    <item>
      <title>Apache RocketMQ单机部署</title>
      <link>https://liangyuanpeng.github.io/deploy-apache-rocketmq/</link>
      <pubDate>Tue, 27 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/deploy-apache-rocketmq/</guid>
      <description>前言 这篇文章以4.3.0版本为标准进行讲述在linux下部署RocketMQ单机实例,在此之前需要已配置JAVA环境。 apache RocketMQ 是阿里巴巴在201</description>
    </item>
    
    <item>
      <title>CI过程中拉取仓库的注意点</title>
      <link>https://liangyuanpeng.github.io/note-ci-repo/</link>
      <pubDate>Sat, 22 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/note-ci-repo/</guid>
      <description>前言 CI 过程中拉取仓库的注意点 备注：本文安装指南基于 Ubuntu 16.04，在 Centos 上某些安装步骤的命令可能需要稍作改动。 CI Hugo博客时子模块注意点 在 fork 了</description>
    </item>
    
    <item>
      <title>CI过程中拉取仓库的注意点</title>
      <link>https://liangyuanpeng.github.io/note-ci-repo/</link>
      <pubDate>Sat, 22 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/note-ci-repo/</guid>
      <description>前言 CI 过程中拉取仓库的注意点 备注：本文安装指南基于 Ubuntu 16.04，在 Centos 上某些安装步骤的命令可能需要稍作改动。 CI Hugo博客时子模块注意点 在 fork 了</description>
    </item>
    
    <item>
      <title>批量操作虚拟机初始化安装软件</title>
      <link>https://liangyuanpeng.github.io/script-for-init-vm-package-with-ansible/</link>
      <pubDate>Sat, 28 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/script-for-init-vm-package-with-ansible/</guid>
      <description>本文简单记录一下批量操作虚拟机时的一个安装软件的初始化操作. 想象一下,当需要在上百台虚拟机上安装相同的软件时,如果手工一台虚拟机一台虚拟机的</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liangyuanpeng.github.io/files/bin/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/files/bin/readme/</guid>
      <description>提供二进制文件下载 kind kind/xxx oras oras/xxx 提供二进制文件下载 kind kind/xxx oras oras/xxx https://liangyuanpeng.com/files/bin/oras_0.16.0_windows_amd64.zip https://liangyuanpeng.com/files/bin/oras_0.16.0_darwin_amd64.tar.gz https://liangyuanpeng.com/files/bin/oras_0.16.0_linux_amd64.tar.gz https://liangyuanpeng.com/files/bin/oras_0.16.0_linux_arm64.tar.gz</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liangyuanpeng.github.io/files/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/files/readme/</guid>
      <description>TODO 写一个脚本,在每次构建网站时,生成一些内容提供下载,例如将每个文章对应的目录打包成一个压缩包,读者可以直接下载单个文件,也可以下载整个压缩</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liangyuanpeng.github.io/search/placeholder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/search/placeholder/</guid>
      <description>asd</description>
    </item>
    
    <item>
      <title>CNCF第二个网关项目Emissary-ingress</title>
      <link>https://liangyuanpeng.github.io/cncf-emissary-ingress/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/cncf-emissary-ingress/</guid>
      <description>我还在翻译这篇文章的时候公众号CNCF已经发布了翻译好的文章&amp;hellip;因此我没有继续翻译了.这里做了传送门. 中文篇在这里 原文在这里</description>
    </item>
    
  </channel>
</rss>
