<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kubernetes on Hi,I`m lan</title>
    <link>https://liangyuanpeng.github.io/categories/kubernetes/</link>
    <description>Recent content in kubernetes on Hi,I`m lan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 27 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://liangyuanpeng.github.io/categories/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>lank8s.cn服务</title>
      <link>https://liangyuanpeng.github.io/post/service-lank8s.cn/</link>
      <pubDate>Mon, 15 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/service-lank8s.cn/</guid>
      <description>Hi there 👋 国内安装K8S基本镜像站&amp;mdash;&amp;gt; lank8s.cn China mirror for registry.k8s.io and gcr.io :) lank8s.cn 服务是什么 ⭐⭐⭐目前 lank8s.cn 正在逐步开源,项目开源地址-&amp;gt;liangy</description>
    </item>
    
    <item>
      <title>用kind搭建k8s集群环境</title>
      <link>https://liangyuanpeng.github.io/post/run-k8s-with-kind/</link>
      <pubDate>Sun, 12 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/run-k8s-with-kind/</guid>
      <description>前言 由于各类基于 kubernetes 的云原生实验或测试的前提都是需要一个 kubernetes 环境,而在写博客时总是需要提及使用 Kind 来搭建 kubernetes 环境. 因此这里单独写一篇文章来介绍如何用</description>
    </item>
    
    <item>
      <title>kubernetes-kep-1880-多服务CIDR</title>
      <link>https://liangyuanpeng.github.io/post/kubernetes-kep-1880-multiple-service-cidrs/</link>
      <pubDate>Wed, 27 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/kubernetes-kep-1880-multiple-service-cidrs/</guid>
      <description>KEP-1880 多服务 CIDR 是什么 KEP-1880 允许通过 API 对象配置分配给 Kubernetes 集群的 ServiceCIDR,能够动态的扩展 kubernetes 集群的服务的 IP,该功能发布 kubernetes v1.29.0 中,功能版本时 al</description>
    </item>
    
    <item>
      <title>尝试向kubernetes提出问题</title>
      <link>https://liangyuanpeng.github.io/post/try-to-ask-question-to-kubernetes-for-source/</link>
      <pubDate>Sat, 02 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/try-to-ask-question-to-kubernetes-for-source/</guid>
      <description>声明 本文会持续的更新,提出一些问题用于研究 kubernetes 原理/源码.欢迎投稿加入你感兴趣的问题 :) 类似的文章有: pulsar源码系列 bookeeper源码</description>
    </item>
    
    <item>
      <title>argoworkflow 云原生工作流引擎</title>
      <link>https://liangyuanpeng.github.io/post/cloudnative-ci-of-argo-workflow/</link>
      <pubDate>Sun, 28 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/cloudnative-ci-of-argo-workflow/</guid>
      <description>注：本文已投稿至云原生社区，因此作者填写为云原生社区 Argo workflow 是什么 老牌的工作流工具 Jenkins 应该是大部分人都接触过的，而在云原生时代，诞生了两大工作流工</description>
    </item>
    
    <item>
      <title>[长期更新]kubernetes问题列表记录</title>
      <link>https://liangyuanpeng.github.io/post/question-list-of-kubernetes/</link>
      <pubDate>Thu, 04 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/question-list-of-kubernetes/</guid>
      <description>说明 本文主要收集常见场景下 kubernetes 遇到的一些常见问题,欢迎对本文进行投稿你认为好的场景或问题. 如何保证 sidecar 先于 app 容器销毁 通过信号方式,目前 kubernetes 已经拥有</description>
    </item>
    
    <item>
      <title>oras的日常使用</title>
      <link>https://liangyuanpeng.github.io/post/usage-oras/</link>
      <pubDate>Wed, 26 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/usage-oras/</guid>
      <description>这篇在讲什么 主要是记录我使用 oras 的一些使用场景。 由于已知 oras 是一个将任意内容存储为容器镜像的工具,因此不过多介绍 oras。 都有什么场景 存储工作区</description>
    </item>
    
    <item>
      <title>[长期更新]kubeadm常见问题以及配置记录</title>
      <link>https://liangyuanpeng.github.io/post/kubeadm-config-note-long-term/</link>
      <pubDate>Sun, 23 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/kubeadm-config-note-long-term/</guid>
      <description>说明 本文主要收集常见场景下 kubeadm 配置以及遇到的一些常见问题,欢迎对本文进行投稿你认为好的场景配置或问题. Kind 是一个基于 Docker 来实现在容器内跑 kubernetes 的方案,</description>
    </item>
    
    <item>
      <title>将你的yaml文件迁移到helm</title>
      <link>https://liangyuanpeng.github.io/post/migrate-your-manifest-yaml-files-into-helm-chart/</link>
      <pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/migrate-your-manifest-yaml-files-into-helm-chart/</guid>
      <description>在这篇博客文章中，我们将学习如何将现有的清单 yaml 文件转换为 Helm Charts。 清单文件 Kubernetes 清单文件是描述 K8s 对象期望状态的YAML文件，例如 pod、s</description>
    </item>
    
    <item>
      <title>从零到 Kubernetes 子项目负责人</title>
      <link>https://liangyuanpeng.github.io/post/from-zero-to-kubernets-subproject-lead/</link>
      <pubDate>Thu, 30 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/from-zero-to-kubernets-subproject-lead/</guid>
      <description>作者 Ala Dewberry (VMware) 译者 梁远鹏 与 chatGPT 加入任何开源社区都可能让人望而生畏，尤其是像 Kubernetes 这样的大型社区。我写这篇文章是为了分享我的经验，并鼓励其他人加入其中。</description>
    </item>
    
    <item>
      <title>k3s常见问题</title>
      <link>https://liangyuanpeng.github.io/post/k3s-qa/</link>
      <pubDate>Wed, 29 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/k3s-qa/</guid>
      <description>前言 备份恢复 如果是使用默认存储的k3s,也就是使用 sqlite 作为存储,那么 k3s 集群的备份和恢复很简单,只需要备份 sqlite 的 db 文件. 至于使用 local 持久化在本地的数</description>
    </item>
    
    <item>
      <title>基于k8up备份PVC到S3存储</title>
      <link>https://liangyuanpeng.github.io/post/backup-pvc-to-s3-with-k8up/</link>
      <pubDate>Wed, 29 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/backup-pvc-to-s3-with-k8up/</guid>
      <description>前言 k8up 目前是 CNCF sanbox 项目,基于 restic 来做数据备份到 S3 以及将数据从 S3 恢复到 PVC 中. 可以一次性备份也可以定时备份,普通备份是通过一个 job 挂载 PVC 来备份数据,也</description>
    </item>
    
    <item>
      <title>Kubernetes HPA:定制指标实现有效的CPU和内存扩展</title>
      <link>https://liangyuanpeng.github.io/post/kubernetes-hpa-custom-metrics-for-effective-cpu-memory-scaling/</link>
      <pubDate>Mon, 27 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/kubernetes-hpa-custom-metrics-for-effective-cpu-memory-scaling/</guid>
      <description>作者 caiolombello 译者 梁远鹏 介绍和概述： Kubernetes 已成为容器编排的事实标准，为管理大规模容器化应用程序提供了强大的平台。 Kubernetes 的一个基本功能是其自动缩放功能，它允许</description>
    </item>
    
    <item>
      <title>keda-helmchart发布v2.10.1</title>
      <link>https://liangyuanpeng.github.io/post/keda-helmchart-release-with-v2.10.1/</link>
      <pubDate>Tue, 14 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/keda-helmchart-release-with-v2.10.1/</guid>
      <description>keda helm chart 发布v2.10.1 长话短说 helm repo add kedacore https://kedacore.github.io/charts helm repo update helm install keda kedacore/keda --version 2.10.1 -n keda --create-namespace 新内容 提供了对podLabels在 webhook Deployment 中的配置 (#404 🎉 贡献者 @pari-) 为cert-ma</description>
    </item>
    
    <item>
      <title>flomesh-ingress浅试</title>
      <link>https://liangyuanpeng.github.io/post/flomesh-ingress-quickstart/</link>
      <pubDate>Fri, 03 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/flomesh-ingress-quickstart/</guid>
      <description>前提 在开始之前,你需要以下前提准备. 对于本文来说使用的 K8S 环境是基于 Kind 来搭建的,因此将 Kind 命令写在前提内,但是如果你使用了其他工具搭建 K8S 或已经有</description>
    </item>
    
    <item>
      <title>快速开始Envoy-gateway</title>
      <link>https://liangyuanpeng.github.io/post/quickstart-with-envoy-gateway/</link>
      <pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/quickstart-with-envoy-gateway/</guid>
      <description>https://github.com/envoyproxy/gateway https://gateway.envoyproxy.io/v0.3.0/user/quickstart.html kubectl apply -f https://github.com/envoyproxy/gateway/releases/download/v0.3.0/install.yaml kubectl wait --timeout=5m -n envoy-gateway-system deployment/envoy-gateway --for=condition=Available kubectl apply -f https://github.com/envoyproxy/gateway/releases/download/v0.3.0/quickstart.yaml export ENVOY_SERVICE=$(kubectl get svc -n envoy-gateway-system --selector=gateway.envoyproxy.io/owning-gateway-namespace=default,gateway.envoyproxy.io/owning-gateway-name=eg -o jsonpath=&amp;#39;{.items[0].metadata.name}&amp;#39;) kubectl -n envoy-gateway-system port-forward service/${ENVOY_SERVICE} 8888:80 curl --verbose --header &amp;#34;Host: www.example.com&amp;#34; http://localhost:8888/get lan@lan:~/server/kind$ curl --verbose --header &amp;#34;Host: www.example.com&amp;#34; http://localhost:8888/get * Trying 127.0.0.1:8888... * TCP_NODELAY set * Connected to localhost (127.0.0.1) port 8888 (#0) &amp;gt; GET /get HTTP/1.1 &amp;gt; Host: www.example.com &amp;gt; User-Agent: curl/7.68.0 &amp;gt;</description>
    </item>
    
    <item>
      <title>Contour-1.24.0发布</title>
      <link>https://liangyuanpeng.github.io/post/contour-1.24.0-release/</link>
      <pubDate>Sun, 26 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/contour-1.24.0-release/</guid>
      <description>前言 我们很高兴推出 Contour 的 v1.24.0 版本,这是我们针对 kubernetes 集群的第7层 HTTP 反向代理. 主要更新 修复了重复 HTTPProxy include condition的处理 重复的 include condition 现在能够被正确识</description>
    </item>
    
    <item>
      <title>ytt与各类yaml相关工具对比</title>
      <link>https://liangyuanpeng.github.io/post/ytt-vs-x/</link>
      <pubDate>Sat, 25 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/ytt-vs-x/</guid>
      <description>前言 ytt 是 CNCF 项目 carvel 中的一个命令行工具,来看看 ytt 与业内其他 yaml 相关工具的对比情况. ytt vs Go text/template (或其他的一些文本模板工具) Go模板 Jinja 大多数通用模板工具</description>
    </item>
    
    <item>
      <title>编译kubernetes组件</title>
      <link>https://liangyuanpeng.github.io/post/compile-kubernetes/</link>
      <pubDate>Sun, 19 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/compile-kubernetes/</guid>
      <description>kubernetes 发展到了今天(2023-02-19),编译 kubernetes 已经是一件很简单的事情,唯一的门槛就是需要有适合的内存资源以及编译需要用到的 registry.k8s.io 中的镜像. 编译 解</description>
    </item>
    
    <item>
      <title>[长期更新]k8s组件常用参数</title>
      <link>https://liangyuanpeng.github.io/post/k8s-component-config-note-long-term/</link>
      <pubDate>Thu, 16 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/k8s-component-config-note-long-term/</guid>
      <description>说明 本文主要收集常见场景下 K8S 组件的配置以及遇到的一些常见问题,欢迎对本文进行投稿你认为好的场景配置或问题. 官方文档 https://kubernetes.io/docs/reference/config-api/</description>
    </item>
    
    <item>
      <title>部署一个webhook,轻松解决gcr.io</title>
      <link>https://liangyuanpeng.github.io/post/resolve-gcr.io-with-webhook-of-repalcer/</link>
      <pubDate>Tue, 05 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/resolve-gcr.io-with-webhook-of-repalcer/</guid>
      <description>⚠这个 webhook 当前已经不再推荐使用⚠ ⚠这个 webhook 当前已经不再推荐使用⚠ ⚠推荐的做法是设置镜像仓库镜像,参考 kind(containerd) 的配置⚠ 前言 lank8s.cn 已经正常运营几年了，目前可以</description>
    </item>
    
    <item>
      <title>快速认识kubernetes的rust客户端</title>
      <link>https://liangyuanpeng.github.io/post/quick-start-kubernetes-client-rust/</link>
      <pubDate>Wed, 02 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/quick-start-kubernetes-client-rust/</guid>
      <description>介绍 kube-rs目前是CNCF的沙箱项目,有一个官方的controller实现示例controller-rs. 还有一个Rust实现的Ope</description>
    </item>
    
    <item>
      <title>cncf基金会中的rust项目</title>
      <link>https://liangyuanpeng.github.io/post/rust-project-in-cncf/</link>
      <pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/rust-project-in-cncf/</guid>
      <description>介绍 本文会介绍在 CNCF 中的 Rust 项目,项目的介绍可能是很简陋的,如果你可以帮忙完善一下项目的介绍,那就太好了,随时欢迎在评论区或网站仓库提交 PR. 项目列</description>
    </item>
    
    <item>
      <title>将热更新configmap作为Envoy的XDS服务</title>
      <link>https://liangyuanpeng.github.io/post/envoy-file-xds-with-reload-configmap/</link>
      <pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/envoy-file-xds-with-reload-configmap/</guid>
      <description>在使用 Envoy 的过程中时常会需要对接 XDS 用作流量的动态管理，那么如何以低成本的方式实现这个效果呢? ConfigMap 你值得拥有,本质上还是使用文件作为 Envoy 的 XDS 服务实现</description>
    </item>
    
    <item>
      <title>将热更新configmap作为Envoy的XDS服务</title>
      <link>https://liangyuanpeng.github.io/post/envoy-file-xds-with-reload-configmap/</link>
      <pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/envoy-file-xds-with-reload-configmap/</guid>
      <description>前言 由于实验基于 kubernetes,因此你首先需要有一个 kubernetes 环境,这里推荐使用 Kind 命令来搭建.见用kind搭建k8s集群环境 前提 kubernetes 为什么选择c</description>
    </item>
    
    <item>
      <title>k8s部署云原生CD引擎Argo</title>
      <link>https://liangyuanpeng.github.io/post/k8s-cd-argo-deploy/</link>
      <pubDate>Thu, 20 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/k8s-cd-argo-deploy/</guid>
      <description>部署Argo CD 安装Argo CD kubectl create namespace argocd kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml 如果下载访问有问题可以改一下地址,是我个人学习使用的一个代理 github 文件的下载地址.将raw.gi</description>
    </item>
    
    <item>
      <title>[长期更新]kubernetes常见问题</title>
      <link>https://liangyuanpeng.github.io/post/kubernetes-qa/</link>
      <pubDate>Tue, 18 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/kubernetes-qa/</guid>
      <description>声明 本文会持续的更新,将在使用 kubernetes 过程中遇到的问题都收集起来.欢迎投稿加入你遇到的问题 :) 跨版本升级 service-account-issuer is a required flag, &amp;ndash;service-account-signing-key-file and &amp;ndash;service-account-issuer are required flags 版本 v1.19.16 升级到 v1.23</description>
    </item>
    
    <item>
      <title>Contour-v1.18.3发布</title>
      <link>https://liangyuanpeng.github.io/post/contour-v1.18.3-release/</link>
      <pubDate>Sun, 09 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/contour-v1.18.3-release/</guid>
      <description>前言 我们很高兴发布发布我们用于kubernetes集群七层反响代理Contour的1.18.3版本. Contour是什么 Contour是基于</description>
    </item>
    
    <item>
      <title>Contour-v1.20.0-beta.1发布</title>
      <link>https://liangyuanpeng.github.io/post/contour-v1.20.0-beta.1-release/</link>
      <pubDate>Sun, 09 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/contour-v1.20.0-beta.1-release/</guid>
      <description>前言 我们很高兴发布发布我们用于kubernetes集群七层反响代理Contour的v1.20.0版本. Contour是什么 Contour是基</description>
    </item>
    
    <item>
      <title>helm部署chaosmesh</title>
      <link>https://liangyuanpeng.github.io/post/deploy-chaosmesh-with-helm/</link>
      <pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/deploy-chaosmesh-with-helm/</guid>
      <description>helm repo add chaos-mesh https://charts.chaos-mesh.org helm install chaos-mesh chaos-mesh/chaos-mesh -n=chaos-testing --version 2.0.4 lan@lan:~$ k get po -n chaos-testing NAME READY STATUS RESTARTS AGE chaos-controller-manager-5f7c8c4569-prc5s 0/1 ContainerCreating 0 40s chaos-daemon-bz859 0/1 ContainerCreating 0 40s chaos-dashboard-5f7b6b9b6b-ml22l 0/1 ContainerCreating 0 40s 最后的最后 本文其实就是按照官方文档操作了一边,就让 chaosmesh 部署起来了.</description>
    </item>
    
    <item>
      <title>k8s-webhook开发技巧</title>
      <link>https://liangyuanpeng.github.io/post/dev-webhook-for-kubernetes/</link>
      <pubDate>Wed, 24 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/dev-webhook-for-kubernetes/</guid>
      <description>什么是kubernetes webhook 痛点 网上很多文章都是说写了 kubernetes webhook 代码后编译丢到 k8s 里面去测试,但是这样就非常消耗时间和精力,因为无法立刻知道写的代码</description>
    </item>
    
    <item>
      <title>部署在线的lank8s webhook之后,不再为k8s.gcr.io/gcr.io镜像苦恼</title>
      <link>https://liangyuanpeng.github.io/post/deploy-lank8s-webhook-for-k8s.gcr.io/</link>
      <pubDate>Sat, 20 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/deploy-lank8s-webhook-for-k8s.gcr.io/</guid>
      <description>⚠这个在线webhook当前已经不再提供使用⚠ ⚠这个在线webhook当前已经不再提供使用⚠ ⚠推荐的做法是设置镜像仓库镜像,参考 kind(containerd) 的配置⚠ 什</description>
    </item>
    
    <item>
      <title>部署metrics-server,把kubectl top用起来</title>
      <link>https://liangyuanpeng.github.io/post/deploy-metrics-server-for-kubectl-top/</link>
      <pubDate>Mon, 15 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/deploy-metrics-server-for-kubectl-top/</guid>
      <description>在部署metrics-server之前使用kubectl top 部署metrics-server yaml部署 yaml文件如下: apiVersion: v1 kind: ServiceAccount metadata: labels: k8s-app: metrics-server name: metrics-server</description>
    </item>
    
    <item>
      <title>Contour-v1.9.0发布</title>
      <link>https://liangyuanpeng.github.io/post/contour-v1.9.0-release/</link>
      <pubDate>Sun, 31 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/contour-v1.9.0-release/</guid>
      <description>前言 Contour继续添加新功能以帮助你更好的管理集群入口,在我们最新的版本Contour1.9.0中包含了支持外部认证服务(extauth</description>
    </item>
    
    <item>
      <title>Contour-v1.19.1发布</title>
      <link>https://liangyuanpeng.github.io/post/contour-v1.19.1-release/</link>
      <pubDate>Wed, 27 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/contour-v1.19.1-release/</guid>
      <description>前言 我们很高兴发布发布我们用于kubernetes集群七层反响代理Contour的1.19.1版本. Contour是什么 Contour是基于</description>
    </item>
    
    <item>
      <title>使用kubekey快速部署kubernetes</title>
      <link>https://liangyuanpeng.github.io/post/deploy-kubernetes-with-kubekey/</link>
      <pubDate>Mon, 25 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/deploy-kubernetes-with-kubekey/</guid>
      <description>前言 Kubekey 是青云研发并开源的一款快速部署 kubernetes 的工具,并且它也是下一代安装kubesphere 的工具,使用 kubekey 你可以很轻松的就部署一套 kubernetes/kubespher 环境,我的体验</description>
    </item>
    
    <item>
      <title>新版本longhorn部署需要k8s.gcr.io镜像</title>
      <link>https://liangyuanpeng.github.io/post/deploy-new-longhorn-lank8s.cn/</link>
      <pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/deploy-new-longhorn-lank8s.cn/</guid>
      <description>前言 在之前，longhorn 的部署是不涉及 k8s.gcr.io 的镜像的,但是在现在新版本当中,csi 相关的镜像都是直接使用 k8s.gcr.io 中的镜像. 淡定 不要慌,这时候可以使</description>
    </item>
    
    <item>
      <title>KubeSphere使用Contour Ingress作为项目网关</title>
      <link>https://liangyuanpeng.github.io/post/kubesphere-gateway-with-contour/</link>
      <pubDate>Sat, 16 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/kubesphere-gateway-with-contour/</guid>
      <description>前言 目前kubesphere基于Nginx Ingress实现网关，3.2将会重构网关这部分，从而做到使用其他ingress项目作为kubes</description>
    </item>
    
    <item>
      <title>宣布Contour v1.13.0</title>
      <link>https://liangyuanpeng.github.io/post/announcing-contour-v1.13.0/</link>
      <pubDate>Sat, 09 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/announcing-contour-v1.13.0/</guid>
      <description>译者:梁远鹏 前言 本译文发布时 Contour 已经发布v1.19.1 Contour继续添加新功能以帮助您更好地管理集群中的入口操作,我们的Contour最新</description>
    </item>
    
    <item>
      <title>Kubernetes多租户–最佳实践指南</title>
      <link>https://liangyuanpeng.github.io/post/k8s-multi-tenancy-guide/</link>
      <pubDate>Wed, 14 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/k8s-multi-tenancy-guide/</guid>
      <description>前言 随着 Kubernetes 的使用范围不断扩大，Kubernetes 多租户成为越来越多的组织感兴趣的话题。但是，由于 Kubernetes 本身并不是多租户系统，因此想要实现多租户</description>
    </item>
    
    <item>
      <title>kubernetes部署kube-prometheus</title>
      <link>https://liangyuanpeng.github.io/post/kubernetes-deploy-kube-prometheus/</link>
      <pubDate>Tue, 06 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/kubernetes-deploy-kube-prometheus/</guid>
      <description>如何部署kube-prometheus 本文使用https://github.com/prometheus-operator/kube-pro</description>
    </item>
    
    <item>
      <title>kubeadm配合短域名lank8s.cn部署kubernetes</title>
      <link>https://liangyuanpeng.github.io/post/kubeadm-deploy-kubernetes-lank8scn/</link>
      <pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/kubeadm-deploy-kubernetes-lank8scn/</guid>
      <description>本文实现目标 本文主要使用 kubeadm 快速部署一个单机的 kubernetes,其中镜像仓库使用 lank8s.cn,当然也可以使用其他地址, lank8s.cn 主要优势是短</description>
    </item>
    
    <item>
      <title>OpenKruise专栏介绍</title>
      <link>https://liangyuanpeng.github.io/post/openkruise-column/</link>
      <pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/openkruise-column/</guid>
      <description>OpenKruise 是什么 OpenKruise 是 Kubernetes 的一个标准扩展，它可以配合原生 Kubernetes 使用，并为管理应用容器、sidecar、镜像分发等方面提供更加强大和高效的能力. 最初由阿里巴巴</description>
    </item>
    
    <item>
      <title>用helm chart将chripstack部署到kubernetes之上</title>
      <link>https://liangyuanpeng.github.io/post/use-helm-deploy-chirpstack-kubernetes/</link>
      <pubDate>Sat, 30 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/use-helm-deploy-chirpstack-kubernetes/</guid>
      <description>chirpstack-helm-chart 开源 lorawan server 项目 chirpstack 的 helm chart english 如何贡献 如果你想对这个项目进行贡献可以点击fork按钮fork这个项目并且发起PR Fork 贡献的准备工作:Fork这个项目</description>
    </item>
    
    <item>
      <title>编译构建Kind</title>
      <link>https://liangyuanpeng.github.io/post/build-for-kind/</link>
      <pubDate>Sat, 15 Oct 1994 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/build-for-kind/</guid>
      <description>前言 本页面将专注于构建自定义的 Kind 容器镜像,只需要在下面评论区添加对应的命令评论触发构建即可. 也可以在 github discussion 地址来发评论,效果是一样的. 默认的命</description>
    </item>
    
    <item>
      <title>CNCF第二个网关项目Emissary-ingress</title>
      <link>https://liangyuanpeng.github.io/post/cncf-emissary-ingress/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/cncf-emissary-ingress/</guid>
      <description>我还在翻译这篇文章的时候公众号CNCF已经发布了翻译好的文章&amp;hellip;因此我没有继续翻译了.这里做了传送门. 中文篇在这里 原文在这里</description>
    </item>
    
  </channel>
</rss>
