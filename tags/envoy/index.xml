<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>envoy on Hi,I`m lan</title>
    <link>https://liangyuanpeng.github.io/tags/envoy/</link>
    <description>Recent content in envoy on Hi,I`m lan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://liangyuanpeng.github.io/tags/envoy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>快速开始Envoy-gateway</title>
      <link>https://liangyuanpeng.github.io/post/quickstart-with-envoy-gateway/</link>
      <pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/quickstart-with-envoy-gateway/</guid>
      <description>https://github.com/envoyproxy/gateway https://gateway.envoyproxy.io/v0.3.0/user/quickstart.html kubectl apply -f https://github.com/envoyproxy/gateway/releases/download/v0.3.0/install.yaml kubectl wait --timeout=5m -n envoy-gateway-system deployment/envoy-gateway --for=condition=Available kubectl apply -f https://github.com/envoyproxy/gateway/releases/download/v0.3.0/quickstart.yaml export ENVOY_SERVICE=$(kubectl get svc -n envoy-gateway-system --selector=gateway.envoyproxy.io/owning-gateway-namespace=default,gateway.envoyproxy.io/owning-gateway-name=eg -o jsonpath=&amp;#39;{.items[0].metadata.name}&amp;#39;) kubectl -n envoy-gateway-system port-forward service/${ENVOY_SERVICE} 8888:80 curl --verbose --header &amp;#34;Host: www.example.com&amp;#34; http://localhost:8888/get lan@lan:~/server/kind$ curl --verbose --header &amp;#34;Host: www.example.com&amp;#34; http://localhost:8888/get * Trying 127.0.0.1:8888... * TCP_NODELAY set * Connected to localhost (127.0.0.1) port 8888 (#0) &amp;gt; GET /get HTTP/1.1 &amp;gt; Host: www.example.com &amp;gt; User-Agent: curl/7.68.0 &amp;gt;</description>
    </item>
    
    <item>
      <title>常用网关都是如何配置缓存请求的</title>
      <link>https://liangyuanpeng.github.io/post/how-to-config-for-cache-from-gateway/</link>
      <pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/how-to-config-for-cache-from-gateway/</guid>
      <description>前言 Envoy 由于 envoy cache 遵循 http cache 规范,因此规定缓存的 API 需要返回cache-control的 header,并且 value 需要标识缓存的时间,例如缓存 10min max-age=600. envoy.yaml static_resources: listeners: -</description>
    </item>
    
    <item>
      <title>基于Envoy搭建K8S应用开发环境</title>
      <link>https://liangyuanpeng.github.io/post/k8s-app-dev-with-envoy/</link>
      <pubDate>Sun, 19 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/k8s-app-dev-with-envoy/</guid>
      <description>主要思想 主要思想是在 K8S 集群中部署一个 Envoy 服务,然后将请求以 L4/L7 的方式代理请求. 例如搭建 webhook 的开发环境时是做 L7 代理,搭建 kube-apiserver 时是做 L4 代理.</description>
    </item>
    
    <item>
      <title>[长期更新]envoy常用</title>
      <link>https://liangyuanpeng.github.io/post/envoy-faq/</link>
      <pubDate>Thu, 16 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/envoy-faq/</guid>
      <description>说明 本文主要收集常见场景下 Envoy 的配置以及遇到的一些常见问题,欢迎对本文进行投稿你认为好的场景配置或问题. 官方文档 https://www.envoyproxy.io/docs/envoy/v1.26.0/ 注意: 上述地址文档对应env</description>
    </item>
    
    <item>
      <title>用GO开发Envoy wasm filter</title>
      <link>https://liangyuanpeng.github.io/post/ennoy-wasm-filter-with-go/</link>
      <pubDate>Sun, 20 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/ennoy-wasm-filter-with-go/</guid>
      <description>目标 总结</description>
    </item>
    
    <item>
      <title>用Rust开发Envoy wasm filter</title>
      <link>https://liangyuanpeng.github.io/post/ennoy-wasm-filter-with-rust/</link>
      <pubDate>Sun, 20 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/ennoy-wasm-filter-with-rust/</guid>
      <description>目标 用WASM filter实现WWW-Authenticate认证,并且支持配置域名白名单和URL白名单. 了解envoy-wasm-rust</description>
    </item>
    
    <item>
      <title>将热更新configmap作为Envoy的XDS服务</title>
      <link>https://liangyuanpeng.github.io/post/envoy-file-xds-with-reload-configmap/</link>
      <pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/envoy-file-xds-with-reload-configmap/</guid>
      <description>在使用 Envoy 的过程中时常会需要对接 XDS 用作流量的动态管理，那么如何以低成本的方式实现这个效果呢? ConfigMap 你值得拥有,本质上还是使用文件作为 Envoy 的 XDS 服务实现</description>
    </item>
    
    <item>
      <title>将热更新configmap作为Envoy的XDS服务</title>
      <link>https://liangyuanpeng.github.io/post/envoy-file-xds-with-reload-configmap/</link>
      <pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/envoy-file-xds-with-reload-configmap/</guid>
      <description>前言 由于实验基于 kubernetes,因此你首先需要有一个 kubernetes 环境,这里推荐使用 Kind 命令来搭建.见用kind搭建k8s集群环境 前提 kubernetes 为什么选择c</description>
    </item>
    
  </channel>
</rss>
