<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kind on Hi,I`m lan</title>
    <link>https://liangyuanpeng.github.io/tags/kind/</link>
    <description>Recent content in kind on Hi,I`m lan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://liangyuanpeng.github.io/tags/kind/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>lank8s.cn服务</title>
      <link>https://liangyuanpeng.github.io/post/service-lank8s.cn/</link>
      <pubDate>Mon, 15 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/service-lank8s.cn/</guid>
      <description>Hi there 👋 国内安装K8S基本镜像站&amp;mdash;&amp;gt; lank8s.cn China mirror for registry.k8s.io and gcr.io :) lank8s.cn 服务是什么 ⭐⭐⭐目前 lank8s.cn 正在逐步开源,项目开源地址-&amp;gt;liangy</description>
    </item>
    
    <item>
      <title>用kind搭建k8s集群环境</title>
      <link>https://liangyuanpeng.github.io/post/run-k8s-with-kind/</link>
      <pubDate>Sun, 12 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/run-k8s-with-kind/</guid>
      <description>前言 由于各类基于 kubernetes 的云原生实验或测试的前提都是需要一个 kubernetes 环境,而在写博客时总是需要提及使用 Kind 来搭建 kubernetes 环境. 因此这里单独写一篇文章来介绍如何用</description>
    </item>
    
    <item>
      <title>构建kind-node镜像的更多选择</title>
      <link>https://liangyuanpeng.github.io/post/more-ways-to-build-kind-node/</link>
      <pubDate>Tue, 28 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/more-ways-to-build-kind-node/</guid>
      <description>简介 在 PR 合并之前, Kind 构建一个自定义的 kubernetes 节点镜像至少有两个步骤(Kind命令自动完成): 使用 kubernetes 源码构建二进制文件 (假设已经下载好 kubernetes 源码) Kind 开始</description>
    </item>
    
    <item>
      <title>使用crio作为kind的容器运行时</title>
      <link>https://liangyuanpeng.github.io/post/use-cri-o-container-runtime-with-kind/</link>
      <pubDate>Wed, 22 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/use-cri-o-container-runtime-with-kind/</guid>
      <description>译者: 梁远鹏 在本文中,我将演示如何基于特定的 kubernetes 版本和 cri-o 运行时构建kind的node镜像 构建基础镜像 为了构建基础镜像,我们需要 kind 的源码: $ git clone</description>
    </item>
    
    <item>
      <title>基于flux和kind快速搭建k8s环境</title>
      <link>https://liangyuanpeng.github.io/post/quick-k8s-dev-with-flux-and-kind/</link>
      <pubDate>Mon, 03 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/quick-k8s-dev-with-flux-and-kind/</guid>
      <description>目前,这只是一个简单的笔记 总是需要各种特定的 K8S 研究环境，而部署各种环境的方式又不一致,有 yamls 方式的 有 helm 方式的，因此需要保证这两种方式都能够通过</description>
    </item>
    
    <item>
      <title>国内环境拉取gcr和k8s镜像</title>
      <link>https://liangyuanpeng.github.io/post/pull-gcr-k8s-image-with-lank8s/</link>
      <pubDate>Wed, 22 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/pull-gcr-k8s-image-with-lank8s/</guid>
      <description>前言 本文接下来所有配置都是基于 lank8s服务来做的. 在习惯了 kind 创建 kubernetes 集群后再次尝试了另外的搭建 kubernetes 集群工具: Talos 和 K0s,深深的感受到 Kind 将常用</description>
    </item>
    
    <item>
      <title>为containerd配置仓库镜像</title>
      <link>https://liangyuanpeng.github.io/post/registry-mirrors-for-containerd/</link>
      <pubDate>Thu, 12 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/registry-mirrors-for-containerd/</guid>
      <description>前言 containerd 的仓库镜像功能是很有用的功能,特别是国内无法访问 gcr.io 和 k8s.gcr.io 以及 registry.k8s.io 这些镜像仓库的情况下. K3S 和 Kind 都提供了比较简单的方式来为内置的 containerd 配置仓库镜像</description>
    </item>
    
    <item>
      <title>用cel表达式来实现k8s准入校验</title>
      <link>https://liangyuanpeng.github.io/post/k8s-admissionregistration-with-cel/</link>
      <pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/k8s-admissionregistration-with-cel/</guid>
      <description>前言 在 K8S 1.26 版本以前,达到 K8S 准入校验策略效果的方式有两种： 自己实现 K8S webook 直接使用 CNCF 项目中以 K8S 策略展开的项目,例如OPA、kyverno. 这些都是</description>
    </item>
    
  </channel>
</rss>
