<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CloudNative on Hi,I`m lan</title>
    <link>https://liangyuanpeng.github.io/tags/cloudnative/</link>
    <description>Recent content in CloudNative on Hi,I`m lan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 03 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://liangyuanpeng.github.io/tags/cloudnative/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>下一代pulsar元数据存储Oxia</title>
      <link>https://liangyuanpeng.github.io/post/oxia-is-next-pulsar-metadata/</link>
      <pubDate>Wed, 03 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/oxia-is-next-pulsar-metadata/</guid>
      <description>Oxia 是什么? 简单来说呢 oxia 是一个 streamnative 开源的基于 kubernetes 的可扩展的元数据存储和协调系统,设计的目标是为了成为Apache Pulsar 的关键组件,也就是元数据中心,取</description>
    </item>
    
    <item>
      <title>epbf入门指南</title>
      <link>https://liangyuanpeng.github.io/post/what-is-ebpfan-introductory-guide/</link>
      <pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/what-is-ebpfan-introductory-guide/</guid>
      <description>该文章是由 Suleiman Abubakar Sadeeq 撰写的。Suleiman Abubakar Sadeeq 是一位有抱负的 React 开发人员，正在学习并帮助构建企业应用程序。在空闲时间，他会踢足球，观看足球比赛并</description>
    </item>
    
    <item>
      <title>基于webtop容器的可视化桌面,浏览器就能打开桌面!</title>
      <link>https://liangyuanpeng.github.io/post/dev-desktop-with-webtop/</link>
      <pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/dev-desktop-with-webtop/</guid>
      <description>前言 前段时间研究过基于容器来搭建一个可视化的 Linux 开发环境,主要是为了研究 java 开发的 Apache Pulsar 和 Apache Bookkeeper 两个项目的源码,如果是非 JVM 类的语言可以基于 openvscode 来搞一个</description>
    </item>
    
    <item>
      <title>部署去ZK后的Apache Pulsar</title>
      <link>https://liangyuanpeng.github.io/post/deploy-pulsar/</link>
      <pubDate>Mon, 06 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/deploy-pulsar/</guid>
      <description>前言 本文基本上是按照官方文档来实践的,非常简单. 首先要明确我们需要做的几件事情： 生成 token 并且配置 Pulsar broker 开启 Token 认证. 配置 Pulsar broker 开启自身需要用到的客户</description>
    </item>
    
    <item>
      <title>部署去ZK后的Apache Pulsar</title>
      <link>https://liangyuanpeng.github.io/post/deploy-pulsar/</link>
      <pubDate>Sat, 22 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/deploy-pulsar/</guid>
      <description>前言 记录我的终端更新笔记 :( 当我们在说元数据中心的时候我们在说什么 Bookkeeper 和 Pulsar Broker 都有各自的元数据中心,并且都有自己的元数据中心接口,默认都是ZK. 要</description>
    </item>
    
    <item>
      <title>Kubernetes多租户–最佳实践指南</title>
      <link>https://liangyuanpeng.github.io/post/k8s-multi-tenancy-guide/</link>
      <pubDate>Wed, 14 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/k8s-multi-tenancy-guide/</guid>
      <description>前言 随着 Kubernetes 的使用范围不断扩大，Kubernetes 多租户成为越来越多的组织感兴趣的话题。但是，由于 Kubernetes 本身并不是多租户系统，因此想要实现多租户</description>
    </item>
    
    <item>
      <title>kubernetes部署longhorn</title>
      <link>https://liangyuanpeng.github.io/post/k8s-deploy-longhorn/</link>
      <pubDate>Fri, 09 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/k8s-deploy-longhorn/</guid>
      <description>前言 longhorn是rancher公司开源并贡献给CNCF的一个开源分布式存储项目,可用来作为kubernetes的CSI存储. 本文介绍h</description>
    </item>
    
    <item>
      <title>kubernetes部署kube-prometheus</title>
      <link>https://liangyuanpeng.github.io/post/kubernetes-deploy-kube-prometheus/</link>
      <pubDate>Tue, 06 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/kubernetes-deploy-kube-prometheus/</guid>
      <description>如何部署kube-prometheus 本文使用https://github.com/prometheus-operator/kube-pro</description>
    </item>
    
    <item>
      <title>prometheus对接CoreDNS实现服务发现</title>
      <link>https://liangyuanpeng.github.io/post/prometheus-coredns-sd/</link>
      <pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/prometheus-coredns-sd/</guid>
      <description>启动etcd [root@localhost etcd-v3.2.32-linux-amd64]# ./etcd --listen-peer-urls=&amp;#34;http://0.0.0.0:2380&amp;#34; --listen-client-urls=&amp;#34;http://0.0.0.0:2379&amp;#34; --advertise-client-urls=&amp;#34;http://0.0.0.0:2379&amp;#34; 2021-04-07 16:03:31.438164 W | pkg/flags: unrecognized environment variable ETCD_VER=v3.2.32 2021-04-07 16:03:31.438308 I | etcdmain: etcd Version: 3.2.32 2021-04-07 16:03:31.438321 I | etcdmain: Git SHA: 7dc07f2a9 2021-04-07 16:03:31.438331 I | etcdmain: Go Version: go1.12.17 coredns配置文件 liangyuanpeng.com { etcd { path /skydns endpoint http://192.168.3.181:2379 } prometheus cache loadbalance } .</description>
    </item>
    
    <item>
      <title>kubeadm配合短域名lank8s.cn部署kubernetes</title>
      <link>https://liangyuanpeng.github.io/post/kubeadm-deploy-kubernetes-lank8scn/</link>
      <pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/kubeadm-deploy-kubernetes-lank8scn/</guid>
      <description>本文实现目标 本文主要使用 kubeadm 快速部署一个单机的 kubernetes,其中镜像仓库使用 lank8s.cn,当然也可以使用其他地址, lank8s.cn 主要优势是短</description>
    </item>
    
    <item>
      <title>OpenKruise专栏介绍</title>
      <link>https://liangyuanpeng.github.io/post/openkruise-column/</link>
      <pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/openkruise-column/</guid>
      <description>OpenKruise 是什么 OpenKruise 是 Kubernetes 的一个标准扩展，它可以配合原生 Kubernetes 使用，并为管理应用容器、sidecar、镜像分发等方面提供更加强大和高效的能力. 最初由阿里巴巴</description>
    </item>
    
    <item>
      <title>k8s-client-go源码剖析(二)</title>
      <link>https://liangyuanpeng.github.io/post/k8s-client-go-source-2/</link>
      <pubDate>Sat, 23 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/k8s-client-go-source-2/</guid>
      <description>简介：云原生社区活动&amp;mdash;Kubernetes 源码剖析第一期第二周 本周是 K8S 源码研习社第一期第二周，学习内容是学习Informer机制</description>
    </item>
    
    <item>
      <title>使用fluentd作为docker日志驱动收集日志</title>
      <link>https://liangyuanpeng.github.io/post/fluentd-logdrive-docker/</link>
      <pubDate>Sat, 15 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/fluentd-logdrive-docker/</guid>
      <description>前言 docker 默认的日志驱动是json-file,每一个容器都会在本地生成一个/var/lib/docker/containers/containe</description>
    </item>
    
    <item>
      <title>制作带有kafka插件和es插件的fluentd镜像</title>
      <link>https://liangyuanpeng.github.io/post/fluentd-plugin-kafka/</link>
      <pubDate>Sat, 15 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/fluentd-plugin-kafka/</guid>
      <description>前言 Fluentd 是用于统一日志记录层的开源数据收集器,是继 Kubernetes、Prometheus、Envoy 、CoreDNS 和 containerd 后的第6个 CNCF 毕业项</description>
    </item>
    
    <item>
      <title>docker部署minio</title>
      <link>https://liangyuanpeng.github.io/post/deploy-minio/</link>
      <pubDate>Thu, 16 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/deploy-minio/</guid>
      <description>前提 docker docker部署 docker部署minio非常简单，只需要两条命令即可完成minio服务器的部署。 docker pull minio/minio docker run -p 9000:9000 minio/minio server /data 下面是两条命令的</description>
    </item>
    
    <item>
      <title>云原生编程语言ballerina:hello-world</title>
      <link>https://liangyuanpeng.github.io/post/ballerina-hello-world/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liangyuanpeng.github.io/post/ballerina-hello-world/</guid>
      <description>前言 Ballerina是一款完全开源的编译时强类型语言,愿景是让云原生时代的程序员轻松编写出想要的的软件. 开源地址:https://gith</description>
    </item>
    
  </channel>
</rss>
